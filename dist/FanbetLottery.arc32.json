{
    "hints": {
        "buy_ticket(axfer,uint8[5])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy_tickets(axfer,uint8[5][])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_tickets()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payout_winnings()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_player(address)(uint64,uint8[5][],uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Player",
                    "elements": [
                        [
                            "round",
                            "uint64"
                        ],
                        [
                            "tickets",
                            "uint8[5][]"
                        ],
                        [
                            "three_match_winnings",
                            "uint64"
                        ],
                        [
                            "four_match_winnings",
                            "uint64"
                        ],
                        [
                            "five_match_winnings",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "get_winning_ticket()uint8[5]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bootstrap(uint64,uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_commit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reveal_ticket()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payout_managers()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reset_lottery()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_admin(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_executor(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_manager(uint8,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_beacon(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_price(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_reveal_delay(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_reset_delay(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_token(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 6,
            "num_uints": 10
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "administrator": {
                    "type": "bytes",
                    "key": "administrator"
                },
                "beacon_app": {
                    "type": "uint64",
                    "key": "beacon_app"
                },
                "commitment": {
                    "type": "bytes",
                    "key": "commitment"
                },
                "committed": {
                    "type": "uint64",
                    "key": "committed"
                },
                "decimals": {
                    "type": "uint64",
                    "key": "decimals"
                },
                "executor": {
                    "type": "bytes",
                    "key": "executor"
                },
                "game_round": {
                    "type": "uint64",
                    "key": "game_round"
                },
                "managers": {
                    "type": "bytes",
                    "key": "managers"
                },
                "prize_pool": {
                    "type": "uint64",
                    "key": "prize_pool"
                },
                "reset_delay": {
                    "type": "uint64",
                    "key": "reset_delay"
                },
                "reveal": {
                    "type": "bytes",
                    "key": "reveal"
                },
                "reveal_delay": {
                    "type": "uint64",
                    "key": "reveal_delay"
                },
                "revealed": {
                    "type": "uint64",
                    "key": "revealed"
                },
                "ticket_price": {
                    "type": "uint64",
                    "key": "ticket_price"
                },
                "ticket_token": {
                    "type": "uint64",
                    "key": "ticket_token"
                },
                "winners": {
                    "type": "bytes",
                    "key": "winners"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FanbetLottery",
        "methods": [
            {
                "name": "buy_ticket",
                "args": [
                    {
                        "type": "axfer",
                        "name": "axfer_txn"
                    },
                    {
                        "type": "uint8[5]",
                        "name": "guess"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy_tickets",
                "args": [
                    {
                        "type": "axfer",
                        "name": "axfer_txn"
                    },
                    {
                        "type": "uint8[5][]",
                        "name": "guesses"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "submit_tickets",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "payout_winnings",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_player",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint8[5][],uint64,uint64,uint64)"
                }
            },
            {
                "name": "get_winning_ticket",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint8[5]"
                }
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    },
                    {
                        "type": "uint64",
                        "name": "decimals"
                    },
                    {
                        "type": "uint64",
                        "name": "beacon_id"
                    },
                    {
                        "type": "uint64",
                        "name": "reset_delay"
                    },
                    {
                        "type": "uint64",
                        "name": "reveal_delay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "submit_commit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reveal_ticket",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "payout_managers",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reset_lottery",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_admin",
                "args": [
                    {
                        "type": "address",
                        "name": "new_admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_executor",
                "args": [
                    {
                        "type": "address",
                        "name": "new_executor"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_manager",
                "args": [
                    {
                        "type": "uint8",
                        "name": "index"
                    },
                    {
                        "type": "address",
                        "name": "new_manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_beacon",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_beacon_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_reveal_delay",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_delay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_reset_delay",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_delay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_token",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_token_id"
                    },
                    {
                        "type": "uint64",
                        "name": "new_decimal"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}