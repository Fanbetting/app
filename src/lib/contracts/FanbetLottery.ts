/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"FanbetLottery","structs":{},"methods":[{"name":"buy_tickets","args":[{"name":"pay_txn","type":"pay"},{"name":"axfer_txn","type":"axfer"},{"name":"guesses","type":"uint8[5][]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"submit_tickets","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"payout_winnings","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_winning_ticket","args":[],"returns":{"type":"uint8[5]"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"bootstrap","args":[{"name":"price","type":"uint64"},{"name":"asset_id","type":"uint64"},{"name":"decimals","type":"uint64"},{"name":"beacon_id","type":"uint64"},{"name":"discount_id","type":"uint64"},{"name":"reveal_duration","type":"uint64"},{"name":"submissions_duration","type":"uint64"},{"name":"payout_duration","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"submit_commit","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reveal_ticket","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"open_payout","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"payout_managers","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reset_lottery","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_admin_account","args":[{"name":"new_admin","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_executor_account","args":[{"name":"new_executor","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_manager_account","args":[{"name":"index","type":"uint8"},{"name":"new_manager","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_beacon_app","args":[{"name":"new_beacon_id","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_discount_app","args":[{"name":"new_discount_id","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_reveal_duration","args":[{"name":"new_delay","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_submission_duration","args":[{"name":"new_delay","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_payout_duration","args":[{"name":"new_delay","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_ticket_price","args":[{"name":"new_price","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_ticket_token","args":[{"name":"new_token_id","type":"uint64"},{"name":"new_decimal","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_storage_cost","args":[{"name":"num_of_tickets","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":13,"bytes":7},"local":{"ints":0,"bytes":0}},"keys":{"global":{"administrator":{"key":"YWRtaW5pc3RyYXRvcg==","keyType":"AVMString","valueType":"AVMBytes"},"beacon_app":{"key":"YmVhY29uX2FwcA==","keyType":"AVMString","valueType":"AVMUint64"},"bootstrapped":{"key":"Ym9vdHN0cmFwcGVk","keyType":"AVMString","valueType":"AVMUint64"},"commitment":{"key":"Y29tbWl0bWVudA==","keyType":"AVMString","valueType":"AVMBytes"},"committed":{"key":"Y29tbWl0dGVk","keyType":"AVMString","valueType":"AVMUint64"},"decimals":{"key":"ZGVjaW1hbHM=","keyType":"AVMString","valueType":"AVMUint64"},"discount_app":{"key":"ZGlzY291bnRfYXBw","keyType":"AVMString","valueType":"AVMUint64"},"executor":{"key":"ZXhlY3V0b3I=","keyType":"AVMString","valueType":"AVMBytes"},"game_round":{"key":"Z2FtZV9yb3VuZA==","keyType":"AVMString","valueType":"AVMUint64"},"game_status":{"key":"Z2FtZV9zdGF0dXM=","keyType":"AVMString","valueType":"AVMBytes"},"managers":{"key":"bWFuYWdlcnM=","keyType":"AVMString","valueType":"AVMBytes"},"payout_duration":{"key":"cGF5b3V0X2R1cmF0aW9u","keyType":"AVMString","valueType":"AVMUint64"},"prize_pool":{"key":"cHJpemVfcG9vbA==","keyType":"AVMString","valueType":"AVMUint64"},"reveal":{"key":"cmV2ZWFs","keyType":"AVMString","valueType":"AVMBytes"},"reveal_duration":{"key":"cmV2ZWFsX2R1cmF0aW9u","keyType":"AVMString","valueType":"AVMUint64"},"revealed":{"key":"cmV2ZWFsZWQ=","keyType":"AVMString","valueType":"AVMUint64"},"submission_duration":{"key":"c3VibWlzc2lvbl9kdXJhdGlvbg==","keyType":"AVMString","valueType":"AVMUint64"},"ticket_price":{"key":"dGlja2V0X3ByaWNl","keyType":"AVMString","valueType":"AVMUint64"},"ticket_token":{"key":"dGlja2V0X3Rva2Vu","keyType":"AVMString","valueType":"AVMUint64"},"winners":{"key":"d2lubmVycw==","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgNiAzMgogICAgYnl0ZWNibG9jayAid2lubmVycyIgImFkbWluaXN0cmF0b3IiICJwcml6ZV9wb29sIiAiZ2FtZV9zdGF0dXMiICJleGVjdXRvciIgInBfIiAiZ2FtZV9yb3VuZCIgInJldmVhbGVkIiAiY29tbWl0dGVkIiAweDE1MWY3Yzc1ICJ0aWNrZXRfdG9rZW4iICJyZXZlYWwiICJib290c3RyYXBwZWQiICJjb21taXRtZW50IiAiYmVhY29uX2FwcCIgImRlY2ltYWxzIiAic3VibWlzc2lvbl9kdXJhdGlvbiIgIk9wZW4iICJ0aWNrZXRfcHJpY2UiICJTdWJtaXNzaW9uIiAiUGF5b3V0IiAicmV2ZWFsX2R1cmF0aW9uIiAicGF5b3V0X2R1cmF0aW9uIiAibWFuYWdlcnMiIDB4MDY4MTAxIDB4MDAwMDAwMDAwMDAwMDAwMCAiZGlzY291bnRfYXBwIiAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5Ojk3CiAgICAvLyBzZWxmLmFkbWluaXN0cmF0b3IgPSBUeG4uc2VuZGVyCiAgICBieXRlY18xIC8vICJhZG1pbmlzdHJhdG9yIgogICAgdHhuIFNlbmRlcgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo5OAogICAgLy8gc2VsZi5leGVjdXRvciA9IFR4bi5zZW5kZXIKICAgIGJ5dGVjIDQgLy8gImV4ZWN1dG9yIgogICAgdHhuIFNlbmRlcgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo5OQogICAgLy8gc2VsZi5nYW1lX3JvdW5kID0gVUludCgwKQogICAgYnl0ZWMgNiAvLyAiZ2FtZV9yb3VuZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjEwMAogICAgLy8gc2VsZi5wcml6ZV9wb29sID0gVUludCgwKQogICAgYnl0ZWNfMiAvLyAicHJpemVfcG9vbCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjEwMQogICAgLy8gc2VsZi5ib290c3RyYXBwZWQgPSBGYWxzZQogICAgYnl0ZWMgMTIgLy8gImJvb3RzdHJhcHBlZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjEwMgogICAgLy8gc2VsZi5jb21taXR0ZWQgPSBGYWxzZQogICAgYnl0ZWMgOCAvLyAiY29tbWl0dGVkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTAzCiAgICAvLyBzZWxmLnJldmVhbGVkID0gRmFsc2UKICAgIGJ5dGVjIDcgLy8gInJldmVhbGVkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo1OQogICAgLy8gY2xhc3MgRmFuYmV0TG90dGVyeShBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDI2CiAgICBwdXNoYnl0ZXNzIDB4YjliNWRkZjcgMHhiOTE5NDk5MyAweDVlZjJlNjM5IDB4NWYyMmEzMDUgMHgzZTA1NWQxYyAweGQwMGFiODg5IDB4NmViOGE5ZTggMHg5OWFkODg2OCAweDBkNmRhNWYzIDB4ZGI3MTFmNDAgMHg4NTU4N2Q3OCAweDIzOWM0NzMzIDB4MzNmZDQyYTAgMHhkODlmZjYwOCAweDY5MTgzODU5IDB4YzEwMWJhMjYgMHgwMjhlMzA3YSAweDdiOTA4NTIzIDB4ZDhjZGQzZTIgMHhiZDFlY2E2YiAweGRlYTQ2ZDQ3IC8vIG1ldGhvZCAiYnV5X3RpY2tldHMocGF5LGF4ZmVyLHVpbnQ4WzVdW10pdm9pZCIsIG1ldGhvZCAic3VibWl0X3RpY2tldHMoKXZvaWQiLCBtZXRob2QgInBheW91dF93aW5uaW5ncygpdm9pZCIsIG1ldGhvZCAiZ2V0X3dpbm5pbmdfdGlja2V0KCl1aW50OFs1XSIsIG1ldGhvZCAiYm9vdHN0cmFwKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIsIG1ldGhvZCAic3VibWl0X2NvbW1pdCgpdm9pZCIsIG1ldGhvZCAicmV2ZWFsX3RpY2tldCgpdm9pZCIsIG1ldGhvZCAib3Blbl9wYXlvdXQoKXZvaWQiLCBtZXRob2QgInBheW91dF9tYW5hZ2Vycygpdm9pZCIsIG1ldGhvZCAicmVzZXRfbG90dGVyeSgpdm9pZCIsIG1ldGhvZCAidXBkYXRlX2FkbWluX2FjY291bnQoYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJ1cGRhdGVfZXhlY3V0b3JfYWNjb3VudChhZGRyZXNzKXZvaWQiLCBtZXRob2QgInVwZGF0ZV9tYW5hZ2VyX2FjY291bnQodWludDgsYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJ1cGRhdGVfYmVhY29uX2FwcCh1aW50NjQpdm9pZCIsIG1ldGhvZCAidXBkYXRlX2Rpc2NvdW50X2FwcCh1aW50NjQpdm9pZCIsIG1ldGhvZCAidXBkYXRlX3JldmVhbF9kdXJhdGlvbih1aW50NjQpdm9pZCIsIG1ldGhvZCAidXBkYXRlX3N1Ym1pc3Npb25fZHVyYXRpb24odWludDY0KXZvaWQiLCBtZXRob2QgInVwZGF0ZV9wYXlvdXRfZHVyYXRpb24odWludDY0KXZvaWQiLCBtZXRob2QgInVwZGF0ZV90aWNrZXRfcHJpY2UodWludDY0KXZvaWQiLCBtZXRob2QgInVwZGF0ZV90aWNrZXRfdG9rZW4odWludDY0LHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJnZXRfc3RvcmFnZV9jb3N0KHVpbnQ2NCl1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2J1eV90aWNrZXRzX3JvdXRlQDUgbWFpbl9zdWJtaXRfdGlja2V0c19yb3V0ZUA2IG1haW5fcGF5b3V0X3dpbm5pbmdzX3JvdXRlQDcgbWFpbl9nZXRfd2lubmluZ190aWNrZXRfcm91dGVAOCBtYWluX2Jvb3RzdHJhcF9yb3V0ZUA5IG1haW5fc3VibWl0X2NvbW1pdF9yb3V0ZUAxMCBtYWluX3JldmVhbF90aWNrZXRfcm91dGVAMTEgbWFpbl9vcGVuX3BheW91dF9yb3V0ZUAxMiBtYWluX3BheW91dF9tYW5hZ2Vyc19yb3V0ZUAxMyBtYWluX3Jlc2V0X2xvdHRlcnlfcm91dGVAMTQgbWFpbl91cGRhdGVfYWRtaW5fYWNjb3VudF9yb3V0ZUAxNSBtYWluX3VwZGF0ZV9leGVjdXRvcl9hY2NvdW50X3JvdXRlQDE2IG1haW5fdXBkYXRlX21hbmFnZXJfYWNjb3VudF9yb3V0ZUAxNyBtYWluX3VwZGF0ZV9iZWFjb25fYXBwX3JvdXRlQDE4IG1haW5fdXBkYXRlX2Rpc2NvdW50X2FwcF9yb3V0ZUAxOSBtYWluX3VwZGF0ZV9yZXZlYWxfZHVyYXRpb25fcm91dGVAMjAgbWFpbl91cGRhdGVfc3VibWlzc2lvbl9kdXJhdGlvbl9yb3V0ZUAyMSBtYWluX3VwZGF0ZV9wYXlvdXRfZHVyYXRpb25fcm91dGVAMjIgbWFpbl91cGRhdGVfdGlja2V0X3ByaWNlX3JvdXRlQDIzIG1haW5fdXBkYXRlX3RpY2tldF90b2tlbl9yb3V0ZUAyNCBtYWluX2dldF9zdG9yYWdlX2Nvc3Rfcm91dGVAMjUKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo1OQogICAgLy8gY2xhc3MgRmFuYmV0TG90dGVyeShBUkM0Q29udHJhY3QpOgogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRfc3RvcmFnZV9jb3N0X3JvdXRlQDI1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ5MgogICAgLy8gQGFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NTkKICAgIC8vIGNsYXNzIEZhbmJldExvdHRlcnkoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0OTIKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZ2V0X3N0b3JhZ2VfY29zdAogICAgYnl0ZWMgOSAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVfdGlja2V0X3Rva2VuX3JvdXRlQDI0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ3OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo1OQogICAgLy8gY2xhc3MgRmFuYmV0TG90dGVyeShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ3OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHVwZGF0ZV90aWNrZXRfdG9rZW4KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlX3RpY2tldF9wcmljZV9yb3V0ZUAyMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NzQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NTkKICAgIC8vIGNsYXNzIEZhbmJldExvdHRlcnkoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NzQKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiB1cGRhdGVfdGlja2V0X3ByaWNlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3VwZGF0ZV9wYXlvdXRfZHVyYXRpb25fcm91dGVAMjI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDY5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjU5CiAgICAvLyBjbGFzcyBGYW5iZXRMb3R0ZXJ5KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDY5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgdXBkYXRlX3BheW91dF9kdXJhdGlvbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVfc3VibWlzc2lvbl9kdXJhdGlvbl9yb3V0ZUAyMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NjQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NTkKICAgIC8vIGNsYXNzIEZhbmJldExvdHRlcnkoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NjQKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiB1cGRhdGVfc3VibWlzc2lvbl9kdXJhdGlvbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVfcmV2ZWFsX2R1cmF0aW9uX3JvdXRlQDIwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ1OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo1OQogICAgLy8gY2xhc3MgRmFuYmV0TG90dGVyeShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ1OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHVwZGF0ZV9yZXZlYWxfZHVyYXRpb24KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlX2Rpc2NvdW50X2FwcF9yb3V0ZUAxOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NTQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NTkKICAgIC8vIGNsYXNzIEZhbmJldExvdHRlcnkoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NTQKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiB1cGRhdGVfZGlzY291bnRfYXBwCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3VwZGF0ZV9iZWFjb25fYXBwX3JvdXRlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ0OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo1OQogICAgLy8gY2xhc3MgRmFuYmV0TG90dGVyeShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ0OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHVwZGF0ZV9iZWFjb25fYXBwCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3VwZGF0ZV9tYW5hZ2VyX2FjY291bnRfcm91dGVAMTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDQ0CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjU5CiAgICAvLyBjbGFzcyBGYW5iZXRMb3R0ZXJ5KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDQ0CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgdXBkYXRlX21hbmFnZXJfYWNjb3VudAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVfZXhlY3V0b3JfYWNjb3VudF9yb3V0ZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MzkKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NTkKICAgIC8vIGNsYXNzIEZhbmJldExvdHRlcnkoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MzkKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiB1cGRhdGVfZXhlY3V0b3JfYWNjb3VudAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVfYWRtaW5fYWNjb3VudF9yb3V0ZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MzQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NTkKICAgIC8vIGNsYXNzIEZhbmJldExvdHRlcnkoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MzQKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiB1cGRhdGVfYWRtaW5fYWNjb3VudAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZXNldF9sb3R0ZXJ5X3JvdXRlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM5NgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcmVzZXRfbG90dGVyeQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9wYXlvdXRfbWFuYWdlcnNfcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzcwCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBwYXlvdXRfbWFuYWdlcnMKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fb3Blbl9wYXlvdXRfcm91dGVAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzYxCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBvcGVuX3BheW91dAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZXZlYWxfdGlja2V0X3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjMyMAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcmV2ZWFsX3RpY2tldAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9zdWJtaXRfY29tbWl0X3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjMwNwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgc3VibWl0X2NvbW1pdAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9ib290c3RyYXBfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyNDYKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NTkKICAgIC8vIGNsYXNzIEZhbmJldExvdHRlcnkoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDcKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyNDYKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBib290c3RyYXAKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3dpbm5pbmdfdGlja2V0X3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjM4CiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X3dpbm5pbmdfdGlja2V0CiAgICBieXRlYyA5IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3BheW91dF93aW5uaW5nc19yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE5MgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcGF5b3V0X3dpbm5pbmdzCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3N1Ym1pdF90aWNrZXRzX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTUyCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBzdWJtaXRfdGlja2V0cwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9idXlfdGlja2V0c19yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjEwOQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo1OQogICAgLy8gY2xhc3MgRmFuYmV0TG90dGVyeShBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIHB1c2hpbnQgMiAvLyAyCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIHB1c2hpbnQgNCAvLyBheGZlcgogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIGF4ZmVyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTA5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYnV5X3RpY2tldHMKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDI2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjU5CiAgICAvLyBjbGFzcyBGYW5iZXRMb3R0ZXJ5KEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDI4CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIF9wdXlhX2xpYi51dGlsLmVuc3VyZV9idWRnZXQocmVxdWlyZWRfYnVkZ2V0OiB1aW50NjQsIGZlZV9zb3VyY2U6IHVpbnQ2NCkgLT4gdm9pZDoKZW5zdXJlX2J1ZGdldDoKICAgIHByb3RvIDIgMAogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICArCgplbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxOgogICAgZnJhbWVfZGlnIDAKICAgIGdsb2JhbCBPcGNvZGVCdWRnZXQKICAgID4KICAgIGJ6IGVuc3VyZV9idWRnZXRfYWZ0ZXJfd2hpbGVANwogICAgaXR4bl9iZWdpbgogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGJ5dGVjIDI0IC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQogICAgYnl0ZWMgMjQgLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KICAgIGZyYW1lX2RpZyAtMQogICAgc3dpdGNoIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANjoKICAgIGl0eG5fc3VibWl0CiAgICBiIGVuc3VyZV9idWRnZXRfd2hpbGVfdG9wQDEKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0OgogICAgZ2xvYmFsIE1pblR4bkZlZQogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDYKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzOgogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDc6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS5idXlfdGlja2V0cyhwYXlfdHhuOiB1aW50NjQsIGF4ZmVyX3R4bjogdWludDY0LCBndWVzc2VzOiBieXRlcykgLT4gdm9pZDoKYnV5X3RpY2tldHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTA5LTExNQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgYnV5X3RpY2tldHMoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBwYXlfdHhuOiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwKICAgIC8vICAgICBheGZlcl90eG46IGd0eG4uQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uLAogICAgLy8gICAgIGd1ZXNzZXM6IER5bmFtaWNBcnJheVtUaWNrZXRdLAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMyAwCiAgICBwdXNoYnl0ZXMgIiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMTYKICAgIC8vIGFzc2VydCBzZWxmLmdhbWVfc3RhdHVzID09IFN0cmluZygiT3BlbiIpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiZ2FtZV9zdGF0dXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZ2FtZV9zdGF0dXMgZXhpc3RzCiAgICBieXRlYyAxNyAvLyAiT3BlbiIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMTcKICAgIC8vIGFzc2VydCBndWVzc2VzLmxlbmd0aCA+PSAxIGFuZCBndWVzc2VzLmxlbmd0aCA8PSAxMDAsIGVyci5JTlZBTElEX0dVRVNTRVMKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkdXAKICAgIGJ6IGJ1eV90aWNrZXRzX2Jvb2xfZmFsc2VAMwogICAgZnJhbWVfZGlnIDEKICAgIHB1c2hpbnQgMTAwIC8vIDEwMAogICAgPD0KICAgIGJ6IGJ1eV90aWNrZXRzX2Jvb2xfZmFsc2VAMwogICAgaW50Y18xIC8vIDEKCmJ1eV90aWNrZXRzX2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMTcKICAgIC8vIGFzc2VydCBndWVzc2VzLmxlbmd0aCA+PSAxIGFuZCBndWVzc2VzLmxlbmd0aCA8PSAxMDAsIGVyci5JTlZBTElEX0dVRVNTRVMKICAgIGFzc2VydCAvLyBBdCBsZWFzdCBvbmUgZ3Vlc3Mgb3IgbGVzcyB0aGFuIDEwMCBndWVzc2VzIGlzIHJlcXVpcmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTE5CiAgICAvLyBpZiBndWVzc2VzLmxlbmd0aCA8PSAxMDoKICAgIGZyYW1lX2RpZyAxCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICA8PQogICAgYnogYnV5X3RpY2tldHNfZWxzZV9ib2R5QDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMjAKICAgIC8vIGVuc3VyZV9idWRnZXQoMjAwMCkKICAgIHB1c2hpbnQgMjAwMCAvLyAyMDAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CgpidXlfdGlja2V0c19hZnRlcl9pZl9lbHNlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTI1CiAgICAvLyByZXF1aXJlZF9zdG9yYWdlX2Nvc3QgPSBzZWxmLmdldF9zdG9yYWdlX2Nvc3QoVUludDY0KGd1ZXNzZXMubGVuZ3RoKSkKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGl0b2IKICAgIGNhbGxzdWIgZ2V0X3N0b3JhZ2VfY29zdAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjEyNgogICAgLy8gYXNzZXJ0IHBheV90eG4ucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywgZXJyLklOVkFMSURfQVNTRVRfUkVDRUlWRVIKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIEludmFsaWQgYXNzZXQgcmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMjcKICAgIC8vIGFzc2VydCBwYXlfdHhuLmFtb3VudCA+PSByZXF1aXJlZF9zdG9yYWdlX2Nvc3QsIGVyci5JTlZBTElEX0FTU0VUX0FNT1VOVAogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBBbW91bnQKICAgIGR1cAogICAgY292ZXIgMwogICAgaXRvYgogICAgYjw9CiAgICBhc3NlcnQgLy8gSW52YWxpZCBhc3NldCBhbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMjkKICAgIC8vIHJlcXVpcmVkX3B1cmNoYXNlX2Nvc3QgPSBzZWxmLnRpY2tldF9wcmljZSAqIGd1ZXNzZXMubGVuZ3RoCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTggLy8gInRpY2tldF9wcmljZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aWNrZXRfcHJpY2UgZXhpc3RzCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTMwCiAgICAvLyBhc3NlcnQgYXhmZXJfdHhuLmFzc2V0X3JlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsIGVyci5JTlZBTElEX0FTU0VUX1JFQ0VJVkVSCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIEFzc2V0UmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIEludmFsaWQgYXNzZXQgcmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMzEKICAgIC8vIGFzc2VydCBheGZlcl90eG4uYXNzZXRfYW1vdW50ID49IHJlcXVpcmVkX3B1cmNoYXNlX2Nvc3QsIGVyci5JTlZBTElEX0FTU0VUX0FNT1VOVAogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBc3NldEFtb3VudAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIDw9CiAgICBhc3NlcnQgLy8gSW52YWxpZCBhc3NldCBhbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMzIKICAgIC8vIGFzc2VydCBheGZlcl90eG4ueGZlcl9hc3NldCA9PSBzZWxmLnRpY2tldF90b2tlbiwgZXJyLklOVkFMSURfQVNTRVRfSUQKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgWGZlckFzc2V0CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTAgLy8gInRpY2tldF90b2tlbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aWNrZXRfdG9rZW4gZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIEludmFsaWQgYXNzZXQgSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMzQKICAgIC8vIGlmIFR4bi5zZW5kZXIgbm90IGluIHNlbGYucGxheWVyczoKICAgIGJ5dGVjIDUgLy8gInBfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJueiBidXlfdGlja2V0c19lbHNlX2JvZHlAMTMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMzUKICAgIC8vIHBsYXllcl9hcHAgPSBhcmM0X2NyZWF0ZShGYW5iZXRQbGF5ZXIsIEFkZHJlc3MoVHhuLnNlbmRlcikpLmNyZWF0ZWRfYXBwCiAgICBpdHhuX2JlZ2luCiAgICB0eG4gU2VuZGVyCiAgICBwdXNoaW50IDMgLy8gMwogICAgaXR4bl9maWVsZCBHbG9iYWxOdW1CeXRlU2xpY2UKICAgIHB1c2hieXRlcyBiYXNlNjQoQ29FQlF3PT0pCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtUGFnZXMKICAgIHB1c2hieXRlcyBiYXNlNjQoQ2lBRUFBRUZBaVlJQjIxaGRHTm9aWE1FRlI5OGRRZHNiM1IwWlhKNUFuUmZBUUFEQUFBQUFnQUFBd2FCQVRFWVFBQUVLQ2NGWnpFYlFRQTRnZ2NFOC9GT293VG1zZDE2QkhobXJIQUVoekVoRXdSL3BuWGNCTDhkSGZVRVVmTUFwellhQUk0SEFIZ0FaZ0JLQUQ0QUpRQVZBQUlpUXpFWkZFUXhHRVEyR2dHSUF0c3BURkN3STBNeEdSUkVNUmhFaUFMR0tVeFFzQ05ETVJrVVJERVlSRFlhQVRZYUFqWWFBNGdDTVNsTVVMQWpRekVaRkVReEdFU0lBZmNqUXpFWkZFUXhHRVEyR2dFMkdnSTJHZ00yR2dTSUFOOHBURkN3STBNeEdSUkVNUmhFTmhvQk5ob0NpQUFsSTBNeEdSUkVNUmdVUkRZYUFZZ0FBaU5EaWdFQWdBWndiR0Y1WlhLTC8yY3FNUUJuaVlvQ0FDSkpnQUJIQWpFQUlpcGxSQkpFSzR2L1VFbTlSUUZBQUFpTEJVbThTQ2NHdjRzRnZrUWlXWXYrSWxsSmpBUUlnYUFHRGtRaWpBS0xBb3NFREVFQVlZditWd0lBaXdJa0N5UllqQUFpakFPTEF5UU1RUUFuaXdDTEF5TllTWXdCSndTbFFRQVVpd0dBQVNDbVFRQUxJMFNMQXlNSWpBTkMvOVlpUXYveWl3Vkp2a1JYQWdDTEFGQkpGU1FLRmxjR0FreFFTd0c4U0wrTEFpTUlqQUpDLzVlSmlnUUJJb0FBUndJeEFDSXFaVVFTUkl2K0YwbUwveGRKVGdJTVJDY0Zpd1NMQlF4QkFKOGlqQUlpakFHTEFTUU1RUUEzSzR2OVVMNUVWd0lBaXdRa0N5Ullpd0ZKVGdJaldJdjhUd0lqV0tpTEFvd0RRUUFHaXdJakNJd0Rpd09NQW9zQkl3aU1BVUwvd29zQ2dRTVNRUUFZaXdaSklsVWpDQlpYQndGY0FJd0dpd1FqQ0l3RVF2K1Vpd0tCQkJKQkFCS0xCa2tqVlNNSUZsY0hBVndCakFaQy85MkxBaVFTaXdhTUFFRUFENHNHU1NWVkl3Z1dWd2NCWEFLTUFJc0FqQVpDLzd3aUtHVkVJbFdMQmtsT0FpSlZDQlpYQndFaUtHVkVJMVZMQWlOVkNCWlhCd0VpS0dWRUpWVkxBeVZWQ0JaWEJ3Rk9BbEJNVUNoTVo0d0FpVEVBSWlwbFJCSkVJaWhsUkNjRVhBQW9UR2NpS0dWRUp3UmNBU2hNWnlJb1pVUW5CRndDS0V4bmlZb0RBU0tML1JkSmkvNFhTVTRDU2d4RUs0di9VRWxPQTc1RUlsbExBUTlFVEFtQlpBNUVnY0lYTWd3TlFRQVhzWUVHc2hBa3Noa25CN0llSndleUh5S3lBYk5DLytBbkJvd0Fpd0dMQWd4QkFDbUxBRmNDQUlzRHZrUlhBZ0NMQVVsT0F5UUxKRmhRU1JVa0NoWlhCZ0pNVUl3QUl3aU1BVUwvejRraUtHVkVpWW9CQVN1TC8xQkp2VVVCUUFBTWdBZ0FBQUFBQUFBQUFFeUppd0MrUkNKWkZreUopCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbVBhZ2VzCiAgICBwdXNoYnl0ZXMgMHhmM2YxNGVhMyAvLyBtZXRob2QgImJvb3RzdHJhcChhZGRyZXNzKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIENyZWF0ZWRBcHBsaWNhdGlvbklECiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTM2CiAgICAvLyBpdHhuLlBheW1lbnQocmVjZWl2ZXI9cGxheWVyX2FwcC5hZGRyZXNzLCBhbW91bnQ9cGF5X3R4bi5hbW91bnQpLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBkdXAKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIGFzc2VydCAvLyBhcHBsaWNhdGlvbiBleGlzdHMKICAgIHVuY292ZXIgMgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMzcKICAgIC8vIHNlbGYucGxheWVyc1tUeG4uc2VuZGVyXSA9IFVJbnQ2NChwbGF5ZXJfYXBwLmlkKQogICAgaXRvYgogICAgYnl0ZWMgNSAvLyAicF8iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGJveF9wdXQKCmJ1eV90aWNrZXRzX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTQzLTE0OAogICAgLy8gYWJpX2NhbGwoCiAgICAvLyAgICAgRmFuYmV0UGxheWVyLnN0b3JlX3RpY2tldHMsCiAgICAvLyAgICAgZ3Vlc3Nlcy5jb3B5KCksCiAgICAvLyAgICAgc2VsZi5nYW1lX3JvdW5kLAogICAgLy8gICAgIGFwcF9pZD1zZWxmLnBsYXllcnNbVHhuLnNlbmRlcl0ubmF0aXZlLAogICAgLy8gKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE0NgogICAgLy8gc2VsZi5nYW1lX3JvdW5kLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gImdhbWVfcm91bmQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZ2FtZV9yb3VuZCBleGlzdHMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNDcKICAgIC8vIGFwcF9pZD1zZWxmLnBsYXllcnNbVHhuLnNlbmRlcl0ubmF0aXZlLAogICAgYnl0ZWMgNSAvLyAicF8iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBsYXllcnMgZW50cnkgZXhpc3RzCiAgICBidG9pCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNDMtMTQ4CiAgICAvLyBhYmlfY2FsbCgKICAgIC8vICAgICBGYW5iZXRQbGF5ZXIuc3RvcmVfdGlja2V0cywKICAgIC8vICAgICBndWVzc2VzLmNvcHkoKSwKICAgIC8vICAgICBzZWxmLmdhbWVfcm91bmQsCiAgICAvLyAgICAgYXBwX2lkPXNlbGYucGxheWVyc1tUeG4uc2VuZGVyXS5uYXRpdmUsCiAgICAvLyApCiAgICBwdXNoYnl0ZXMgMHhlNmIxZGQ3YSAvLyBtZXRob2QgInN0b3JlX3RpY2tldHModWludDhbNV1bXSx1aW50NjQpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNTAKICAgIC8vIHNlbGYucHJpemVfcG9vbCArPSBheGZlcl90eG4uYXNzZXRfYW1vdW50CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAicHJpemVfcG9vbCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcml6ZV9wb29sIGV4aXN0cwogICAgZnJhbWVfZGlnIDAKICAgICsKICAgIGJ5dGVjXzIgLy8gInByaXplX3Bvb2wiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgpidXlfdGlja2V0c19lbHNlX2JvZHlAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTQwCiAgICAvLyBwbGF5ZXJfYXBwID0gQXBwbGljYXRpb24oc2VsZi5wbGF5ZXJzW1R4bi5zZW5kZXJdLm5hdGl2ZSkKICAgIGJ5dGVjIDUgLy8gInBfIgogICAgdHhuIFNlbmRlcgogICAgY29uY2F0CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wbGF5ZXJzIGVudHJ5IGV4aXN0cwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE0MQogICAgLy8gaXR4bi5QYXltZW50KHJlY2VpdmVyPXBsYXllcl9hcHAuYWRkcmVzcywgYW1vdW50PXBheV90eG4uYW1vdW50KS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGIgYnV5X3RpY2tldHNfYWZ0ZXJfaWZfZWxzZUAxNQoKYnV5X3RpY2tldHNfZWxzZV9ib2R5QDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTIyCiAgICAvLyBlbGlmIGd1ZXNzZXMubGVuZ3RoIDw9IDEwMDoKICAgIGZyYW1lX2RpZyAxCiAgICBwdXNoaW50IDEwMCAvLyAxMDAKICAgIDw9CiAgICBieiBidXlfdGlja2V0c19hZnRlcl9pZl9lbHNlQDkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxMjMKICAgIC8vIGVuc3VyZV9idWRnZXQoMjAwMDApCiAgICBwdXNoaW50IDIwMDAwIC8vIDIwMDAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICBiIGJ1eV90aWNrZXRzX2FmdGVyX2lmX2Vsc2VAOQoKYnV5X3RpY2tldHNfYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgYnV5X3RpY2tldHNfYm9vbF9tZXJnZUA0CgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9sb3R0ZXJ5LmNvbnRyYWN0LkZhbmJldExvdHRlcnkuc3VibWl0X3RpY2tldHMoKSAtPiB2b2lkOgpzdWJtaXRfdGlja2V0czoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNTItMTUzCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBzdWJtaXRfdGlja2V0cyhzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICBpbnRjXzAgLy8gMAogICAgcHVzaGJ5dGVzICIiCiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNTQKICAgIC8vIGFzc2VydCBzZWxmLmdhbWVfc3RhdHVzID09IFN0cmluZygiU3VibWlzc2lvbiIpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiZ2FtZV9zdGF0dXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZ2FtZV9zdGF0dXMgZXhpc3RzCiAgICBieXRlYyAxOSAvLyAiU3VibWlzc2lvbiIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNTUKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyIGluIHNlbGYucGxheWVycywgZXJyLlVOQVVUSEVOVElDQVRFRAogICAgYnl0ZWMgNSAvLyAicF8iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IHVuYXV0aGVudGljYXRlZCB0byBjYWxsIHRoaXMgZnVuY3Rpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNTcKICAgIC8vIHBsYXllcl9hcHAgPSBBcHBsaWNhdGlvbihzZWxmLnBsYXllcnNbVHhuLnNlbmRlcl0ubmF0aXZlKQogICAgYnl0ZWMgNSAvLyAicF8iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBsYXllcnMgZW50cnkgZXhpc3RzCiAgICBidG9pCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNTgKICAgIC8vIG4gPSBhYmlfY2FsbChGYW5iZXRQbGF5ZXIuZ2V0X3RpY2tldHNfbGVuZ3RoLCBzZWxmLmdhbWVfcm91bmQsIGFwcF9pZD1wbGF5ZXJfYXBwKVswXQogICAgaXR4bl9iZWdpbgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gImdhbWVfcm91bmQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZ2FtZV9yb3VuZCBleGlzdHMKICAgIGl0b2IKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgcHVzaGJ5dGVzIDB4NTFmMzAwYTcgLy8gbWV0aG9kICJnZXRfdGlja2V0c19sZW5ndGgodWludDY0KXVpbnQ2NCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50Y18yIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlYyA5IC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQVJDNCBwcmVmaXggaXMgdmFsaWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNjAKICAgIC8vIGFzc2VydCBuICE9IDAsIGVyci5BTFJFQURZX1NVQk1JVFRFRAogICAgZHVwCiAgICBieXRlYyAyNSAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGIhPQogICAgYXNzZXJ0IC8vIExvdHRlcnkgdGlja2V0IHN1Ym1pc3Npb25zIGNsb3NlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE2MgogICAgLy8gaWYgbiA8PSAxMDoKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMGEKICAgIGI8PQogICAgYnogc3VibWl0X3RpY2tldHNfZWxzZV9ib2R5QDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNjMKICAgIC8vIGVuc3VyZV9idWRnZXQoNTAwMCkKICAgIHB1c2hpbnQgNTAwMCAvLyA1MDAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CgpzdWJtaXRfdGlja2V0c19hZnRlcl9pZl9lbHNlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTcxCiAgICAvLyBpID0gVUludDY0KDApCiAgICBieXRlYyAyNSAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCnN1Ym1pdF90aWNrZXRzX3doaWxlX3RvcEAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNzMKICAgIC8vIHdoaWxlIGkubmF0aXZlIDwgbi5uYXRpdmU6CiAgICBidG9pCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfZGlnIDUKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICA8CiAgICBieiBzdWJtaXRfdGlja2V0c19hZnRlcl93aGlsZUAxNgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE3NAogICAgLy8gc3RhcnQgPSBVSW50NjQoaS5uYXRpdmUpCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBpdG9iCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxNzUKICAgIC8vIHN0b3AgPSBVSW50NjQobi5uYXRpdmUgaWYgaS5uYXRpdmUgKyBjZmcuTUFYX1BBR0lOQVRJT04gPiBuLm5hdGl2ZSBlbHNlIGkubmF0aXZlICsgY2ZnLk1BWF9QQUdJTkFUSU9OKQogICAgcHVzaGludCAxMDAgLy8gMTAwCiAgICArCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMwogICAgZnJhbWVfZGlnIDIKICAgID4KICAgIGJ6IHN1Ym1pdF90aWNrZXRzX3Rlcm5hcnlfZmFsc2VAMTMKICAgIGZyYW1lX2RpZyAyCgpzdWJtaXRfdGlja2V0c190ZXJuYXJ5X21lcmdlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE3NQogICAgLy8gc3RvcCA9IFVJbnQ2NChuLm5hdGl2ZSBpZiBpLm5hdGl2ZSArIGNmZy5NQVhfUEFHSU5BVElPTiA+IG4ubmF0aXZlIGVsc2UgaS5uYXRpdmUgKyBjZmcuTUFYX1BBR0lOQVRJT04pCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTc3LTE4NAogICAgLy8gbWF0Y2hlcyA9IGFiaV9jYWxsKAogICAgLy8gICAgIEZhbmJldFBsYXllci5jb21wdXRlX3dpbm5pbmdzLAogICAgLy8gICAgIHNlbGYucmV2ZWFsLndpbm5pbmdfdGlja2V0LAogICAgLy8gICAgIHNlbGYuZ2FtZV9yb3VuZCwKICAgIC8vICAgICBzdGFydCwKICAgIC8vICAgICBzdG9wLAogICAgLy8gICAgIGFwcF9pZD1wbGF5ZXJfYXBwLAogICAgLy8gKVswXQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE3OQogICAgLy8gc2VsZi5yZXZlYWwud2lubmluZ190aWNrZXQsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTEgLy8gInJldmVhbCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZXZlYWwgZXhpc3RzCiAgICBleHRyYWN0IDAgNSAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxODAKICAgIC8vIHNlbGYuZ2FtZV9yb3VuZCwKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA2IC8vICJnYW1lX3JvdW5kIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmdhbWVfcm91bmQgZXhpc3RzCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgNAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTc3LTE4NAogICAgLy8gbWF0Y2hlcyA9IGFiaV9jYWxsKAogICAgLy8gICAgIEZhbmJldFBsYXllci5jb21wdXRlX3dpbm5pbmdzLAogICAgLy8gICAgIHNlbGYucmV2ZWFsLndpbm5pbmdfdGlja2V0LAogICAgLy8gICAgIHNlbGYuZ2FtZV9yb3VuZCwKICAgIC8vICAgICBzdGFydCwKICAgIC8vICAgICBzdG9wLAogICAgLy8gICAgIGFwcF9pZD1wbGF5ZXJfYXBwLAogICAgLy8gKVswXQogICAgcHVzaGJ5dGVzIDB4Nzg2NmFjNzAgLy8gbWV0aG9kICJjb21wdXRlX3dpbm5pbmdzKHVpbnQ4WzVdLHVpbnQ2NCx1aW50NjQsdWludDY0KSh1aW50OCx1aW50OCx1aW50OCkiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBmcmFtZV9kaWcgMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjIDkgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBBUkM0IHByZWZpeCBpcyB2YWxpZAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE4NgogICAgLy8gc2VsZi53aW5uZXJzLnRocmVlX21hdGNoID0gVUludDY0KG1hdGNoZXMudGhyZWVfbWF0Y2gubmF0aXZlICsgc2VsZi53aW5uZXJzLnRocmVlX21hdGNoLm5hdGl2ZSkKICAgIGR1cAogICAgcHVzaGludCA0IC8vIDQKICAgIGdldGJ5dGUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLndpbm5lcnMgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgICsKICAgIGl0b2IKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLndpbm5lcnMgZXhpc3RzCiAgICBzd2FwCiAgICByZXBsYWNlMiAwCiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxODcKICAgIC8vIHNlbGYud2lubmVycy5mb3VyX21hdGNoID0gVUludDY0KG1hdGNoZXMuZm91cl9tYXRjaC5uYXRpdmUgKyBzZWxmLndpbm5lcnMuZm91cl9tYXRjaC5uYXRpdmUpCiAgICBkdXAKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBnZXRieXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAid2lubmVycyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi53aW5uZXJzIGV4aXN0cwogICAgcHVzaGludCA4IC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICArCiAgICBpdG9iCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAid2lubmVycyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi53aW5uZXJzIGV4aXN0cwogICAgc3dhcAogICAgcmVwbGFjZTIgOAogICAgYnl0ZWNfMCAvLyAid2lubmVycyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICBpbnRjXzIgLy8gNgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE4OAogICAgLy8gc2VsZi53aW5uZXJzLmZpdmVfbWF0Y2ggPSBVSW50NjQobWF0Y2hlcy5maXZlX21hdGNoLm5hdGl2ZSArIHNlbGYud2lubmVycy5maXZlX21hdGNoLm5hdGl2ZSkKICAgIGdldGJ5dGUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLndpbm5lcnMgZXhpc3RzCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgKwogICAgaXRvYgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIndpbm5lcnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYud2lubmVycyBleGlzdHMKICAgIHN3YXAKICAgIHJlcGxhY2UyIDE2CiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIGIgc3VibWl0X3RpY2tldHNfd2hpbGVfdG9wQDEwCgpzdWJtaXRfdGlja2V0c190ZXJuYXJ5X2ZhbHNlQDEzOgogICAgZnJhbWVfZGlnIDMKICAgIGIgc3VibWl0X3RpY2tldHNfdGVybmFyeV9tZXJnZUAxNAoKc3VibWl0X3RpY2tldHNfYWZ0ZXJfd2hpbGVAMTY6CiAgICByZXRzdWIKCnN1Ym1pdF90aWNrZXRzX2Vsc2VfYm9keUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE2NQogICAgLy8gZWxpZiBuIDw9IDEwMDoKICAgIGZyYW1lX2RpZyA1CiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDY0CiAgICBiPD0KICAgIGJ6IHN1Ym1pdF90aWNrZXRzX2Vsc2VfYm9keUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTY2CiAgICAvLyBlbnN1cmVfYnVkZ2V0KDUwMDAwKQogICAgcHVzaGludCA1MDAwMCAvLyA1MDAwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgYiBzdWJtaXRfdGlja2V0c19hZnRlcl9pZl9lbHNlQDkKCnN1Ym1pdF90aWNrZXRzX2Vsc2VfYm9keUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE2OAogICAgLy8gZWxpZiBuIDw9IDgwMDoKICAgIGZyYW1lX2RpZyA1CiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMzIwCiAgICBiPD0KICAgIGJ6IHN1Ym1pdF90aWNrZXRzX2FmdGVyX2lmX2Vsc2VAOQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE2OQogICAgLy8gZW5zdXJlX2J1ZGdldCgxMDAwMDApCiAgICBwdXNoaW50IDEwMDAwMCAvLyAxMDAwMDAKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIGIgc3VibWl0X3RpY2tldHNfYWZ0ZXJfaWZfZWxzZUA5CgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9sb3R0ZXJ5LmNvbnRyYWN0LkZhbmJldExvdHRlcnkucGF5b3V0X3dpbm5pbmdzKCkgLT4gdm9pZDoKcGF5b3V0X3dpbm5pbmdzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE5Mi0xOTMKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHBheW91dF93aW5uaW5ncyhzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE5NAogICAgLy8gYXNzZXJ0IHNlbGYuZ2FtZV9zdGF0dXMgPT0gU3RyaW5nKCJQYXlvdXQiKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImdhbWVfc3RhdHVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmdhbWVfc3RhdHVzIGV4aXN0cwogICAgYnl0ZWMgMjAgLy8gIlBheW91dCIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxOTUKICAgIC8vIGFzc2VydCBzZWxmLnByaXplX3Bvb2wgPiAwLCBlcnIuSU5WQUxJRF9QUklaRV9QT09MCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAicHJpemVfcG9vbCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcml6ZV9wb29sIGV4aXN0cwogICAgYXNzZXJ0IC8vIFByaXplIHBvb2wgaXMgZW1wdHkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToxOTYKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyLmJhbGFuY2UgPiBUeG4uc2VuZGVyLm1pbl9iYWxhbmNlLCBlcnIuSU5WQUxJRF9NSU5fQkFMQU5DRQogICAgdHhuIFNlbmRlcgogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIHR4biBTZW5kZXIKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICA+CiAgICBhc3NlcnQgLy8gQWNjb3VudCBiYWxhbmNlIGlzIGxvd2VyIHRoYW4gbWluaW11bSBiYWxhbmNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MTk4CiAgICAvLyBmaXZlX21hdGNoZXNfYWxsb2NhdGlvbiA9IChzZWxmLnByaXplX3Bvb2wgKiBjZmcuRklWRV9NQVRDSEVTX1BFUkNFTlRBR0UpIC8vIFVJbnQoMTAwKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gInByaXplX3Bvb2wiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucHJpemVfcG9vbCBleGlzdHMKICAgIHB1c2hpbnQgNTUgLy8gNTUKICAgICoKICAgIHB1c2hpbnQgMTAwIC8vIDEwMAogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjE5OQogICAgLy8gZm91cl9tYXRjaGVzX2FsbG9jYXRpb24gPSAoc2VsZi5wcml6ZV9wb29sICogY2ZnLkZPVVJfTUFUQ0hFU19QRVJDRU5UQUdFKSAvLyBVSW50KDEwMCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJwcml6ZV9wb29sIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnByaXplX3Bvb2wgZXhpc3RzCiAgICBwdXNoaW50IDI1IC8vIDI1CiAgICAqCiAgICBwdXNoaW50IDEwMCAvLyAxMDAKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyMDAKICAgIC8vIHRocmVlX21hdGNoZXNfYWxsb2NhdGlvbiA9IChzZWxmLnByaXplX3Bvb2wgKiBjZmcuVEhSRUVfTUFUQ0hFU19QRVJDRU5UQUdFKSAvLyBVSW50KDEwMCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJwcml6ZV9wb29sIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnByaXplX3Bvb2wgZXhpc3RzCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICAqCiAgICBwdXNoaW50IDEwMCAvLyAxMDAKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyMDQKICAgIC8vIGlmIHNlbGYud2lubmVycy5maXZlX21hdGNoLm5hdGl2ZSAhPSBVSW50KDApCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAid2lubmVycyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi53aW5uZXJzIGV4aXN0cwogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyMDMtMjA1CiAgICAvLyBmaXZlX21hdGNoZXNfYWxsb2NhdGlvbiAvLyBzZWxmLndpbm5lcnMuZml2ZV9tYXRjaC5uYXRpdmUKICAgIC8vIGlmIHNlbGYud2lubmVycy5maXZlX21hdGNoLm5hdGl2ZSAhPSBVSW50KDApCiAgICAvLyBlbHNlIFVJbnQoMCkKICAgIGJ6IHBheW91dF93aW5uaW5nc190ZXJuYXJ5X2ZhbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyMDMKICAgIC8vIGZpdmVfbWF0Y2hlc19hbGxvY2F0aW9uIC8vIHNlbGYud2lubmVycy5maXZlX21hdGNoLm5hdGl2ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIndpbm5lcnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYud2lubmVycyBleGlzdHMKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGV4dHJhY3RfdWludDY0CiAgICBmcmFtZV9kaWcgMgogICAgc3dhcAogICAgLwogICAgZnJhbWVfYnVyeSAwCgpwYXlvdXRfd2lubmluZ3NfdGVybmFyeV9tZXJnZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIwOQogICAgLy8gaWYgc2VsZi53aW5uZXJzLmZvdXJfbWF0Y2gubmF0aXZlICE9IFVJbnQoMCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLndpbm5lcnMgZXhpc3RzCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyMDgtMjEwCiAgICAvLyBmb3VyX21hdGNoZXNfYWxsb2NhdGlvbiAvLyBzZWxmLndpbm5lcnMuZm91cl9tYXRjaC5uYXRpdmUKICAgIC8vIGlmIHNlbGYud2lubmVycy5mb3VyX21hdGNoLm5hdGl2ZSAhPSBVSW50KDApCiAgICAvLyBlbHNlIFVJbnQoMCkKICAgIGJ6IHBheW91dF93aW5uaW5nc190ZXJuYXJ5X2ZhbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyMDgKICAgIC8vIGZvdXJfbWF0Y2hlc19hbGxvY2F0aW9uIC8vIHNlbGYud2lubmVycy5mb3VyX21hdGNoLm5hdGl2ZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIndpbm5lcnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYud2lubmVycyBleGlzdHMKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZnJhbWVfZGlnIDMKICAgIHN3YXAKICAgIC8KICAgIGZyYW1lX2J1cnkgMQoKcGF5b3V0X3dpbm5pbmdzX3Rlcm5hcnlfbWVyZ2VANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyMTQKICAgIC8vIGlmIHNlbGYud2lubmVycy50aHJlZV9tYXRjaC5uYXRpdmUgIT0gVUludCgwKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIndpbm5lcnMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYud2lubmVycyBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIxMy0yMTUKICAgIC8vIHRocmVlX21hdGNoZXNfYWxsb2NhdGlvbiAvLyBzZWxmLndpbm5lcnMudGhyZWVfbWF0Y2gubmF0aXZlCiAgICAvLyBpZiBzZWxmLndpbm5lcnMudGhyZWVfbWF0Y2gubmF0aXZlICE9IFVJbnQoMCkKICAgIC8vIGVsc2UgVUludCgwKQogICAgYnogcGF5b3V0X3dpbm5pbmdzX3Rlcm5hcnlfZmFsc2VAOAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIxMwogICAgLy8gdGhyZWVfbWF0Y2hlc19hbGxvY2F0aW9uIC8vIHNlbGYud2lubmVycy50aHJlZV9tYXRjaC5uYXRpdmUKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLndpbm5lcnMgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGZyYW1lX2RpZyA0CiAgICBzd2FwCiAgICAvCgpwYXlvdXRfd2lubmluZ3NfdGVybmFyeV9tZXJnZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIxOAogICAgLy8gcGxheWVyX2FwcCA9IEFwcGxpY2F0aW9uKHNlbGYucGxheWVyc1tUeG4uc2VuZGVyXS5uYXRpdmUpCiAgICBieXRlYyA1IC8vICJwXyIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucGxheWVycyBlbnRyeSBleGlzdHMKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyMTktMjIyCiAgICAvLyBtYXRjaGVzID0gYWJpX2NhbGwoCiAgICAvLyAgICAgRmFuYmV0UGxheWVyLmdldF9tYXRjaGVzLAogICAgLy8gICAgIGFwcF9pZD1wbGF5ZXJfYXBwLAogICAgLy8gKVswXQogICAgaXR4bl9iZWdpbgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBwdXNoYnl0ZXMgMHhiZjFkMWRmNSAvLyBtZXRob2QgImdldF9tYXRjaGVzKCkodWludDgsdWludDgsdWludDgpIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjIDkgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBBUkM0IHByZWZpeCBpcyB2YWxpZAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIyNQogICAgLy8gcGF5b3V0X2Ftb3VudCArPSBmaXZlX21hdGNoX3BheW91dCAqIG1hdGNoZXMuZml2ZV9tYXRjaC5uYXRpdmUKICAgIGR1cAogICAgaW50Y18yIC8vIDYKICAgIGdldGJ5dGUKICAgIGZyYW1lX2RpZyAwCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjI2CiAgICAvLyBwYXlvdXRfYW1vdW50ICs9IGZvdXJfbWF0Y2hfcGF5b3V0ICogbWF0Y2hlcy5mb3VyX21hdGNoLm5hdGl2ZQogICAgZGlnIDEKICAgIHB1c2hpbnQgNSAvLyA1CiAgICBnZXRieXRlCiAgICBmcmFtZV9kaWcgMQogICAgKgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIyNwogICAgLy8gcGF5b3V0X2Ftb3VudCArPSB0aHJlZV9tYXRjaF9wYXlvdXQgKiBtYXRjaGVzLnRocmVlX21hdGNoLm5hdGl2ZQogICAgc3dhcAogICAgcHVzaGludCA0IC8vIDQKICAgIGdldGJ5dGUKICAgIHVuY292ZXIgMgogICAgKgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIyOQogICAgLy8gYXNzZXJ0IHBheW91dF9hbW91bnQgIT0gVUludCgwKSwgZXJyLklOVkFMSURfUEFZT1VUCiAgICBkdXAKICAgIGFzc2VydCAvLyBBY2NvdW50IGhhcyBubyB3aW5uaW5ncwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIzMS0yMzYKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYudGlja2V0X3Rva2VuLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PXBheW91dF9hbW91bnQsCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjMyCiAgICAvLyB4ZmVyX2Fzc2V0PXNlbGYudGlja2V0X3Rva2VuLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEwIC8vICJ0aWNrZXRfdG9rZW4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlja2V0X3Rva2VuIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIzMwogICAgLy8gYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIHVuY292ZXIgMgogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIzMQogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgcHVzaGludCA0IC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjM1CiAgICAvLyBmZWU9MCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIzMS0yMzYKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYudGlja2V0X3Rva2VuLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PXBheW91dF9hbW91bnQsCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgpwYXlvdXRfd2lubmluZ3NfdGVybmFyeV9mYWxzZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIxNQogICAgLy8gZWxzZSBVSW50KDApCiAgICBpbnRjXzAgLy8gMAogICAgYiBwYXlvdXRfd2lubmluZ3NfdGVybmFyeV9tZXJnZUA5CgpwYXlvdXRfd2lubmluZ3NfdGVybmFyeV9mYWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjIxMAogICAgLy8gZWxzZSBVSW50KDApCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAxCiAgICBiIHBheW91dF93aW5uaW5nc190ZXJuYXJ5X21lcmdlQDYKCnBheW91dF93aW5uaW5nc190ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjA1CiAgICAvLyBlbHNlIFVJbnQoMCkKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgcGF5b3V0X3dpbm5pbmdzX3Rlcm5hcnlfbWVyZ2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYW5iZXRfbG90dGVyeS5jb250cmFjdC5GYW5iZXRMb3R0ZXJ5LmdldF93aW5uaW5nX3RpY2tldCgpIC0+IGJ5dGVzOgpnZXRfd2lubmluZ190aWNrZXQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjQwCiAgICAvLyByZXR1cm4gc2VsZi5yZXZlYWwud2lubmluZ190aWNrZXQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMSAvLyAicmV2ZWFsIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnJldmVhbCBleGlzdHMKICAgIGV4dHJhY3QgMCA1IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9sb3R0ZXJ5LmNvbnRyYWN0LkZhbmJldExvdHRlcnkuYm9vdHN0cmFwKHByaWNlOiBieXRlcywgYXNzZXRfaWQ6IGJ5dGVzLCBkZWNpbWFsczogYnl0ZXMsIGJlYWNvbl9pZDogYnl0ZXMsIGRpc2NvdW50X2lkOiBieXRlcywgcmV2ZWFsX2R1cmF0aW9uOiBieXRlcywgc3VibWlzc2lvbnNfZHVyYXRpb246IGJ5dGVzLCBwYXlvdXRfZHVyYXRpb246IGJ5dGVzKSAtPiB2b2lkOgpib290c3RyYXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjQ2LTI1NwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgYm9vdHN0cmFwKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgcHJpY2U6IFVJbnQ2NCwKICAgIC8vICAgICBhc3NldF9pZDogVUludDY0LAogICAgLy8gICAgIGRlY2ltYWxzOiBVSW50NjQsCiAgICAvLyAgICAgYmVhY29uX2lkOiBVSW50NjQsCiAgICAvLyAgICAgZGlzY291bnRfaWQ6IFVJbnQ2NCwKICAgIC8vICAgICByZXZlYWxfZHVyYXRpb246IFVJbnQ2NCwKICAgIC8vICAgICBzdWJtaXNzaW9uc19kdXJhdGlvbjogVUludDY0LAogICAgLy8gICAgIHBheW91dF9kdXJhdGlvbjogVUludDY0LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gOCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjU4CiAgICAvLyBhc3NlcnQgbm90IHNlbGYuYm9vdHN0cmFwcGVkLCBlcnIuQUxSRUFEWV9CT09UU1RSQVBQRUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMiAvLyAiYm9vdHN0cmFwcGVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJvb3RzdHJhcHBlZCBleGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBMb3R0ZXJ5IGFscmVhZHkgYm9vdHN0cmFwcGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjU5CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmV4ZWN1dG9yLCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAiZXhlY3V0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZXhlY3V0b3IgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IHVuYXV0aG9yaXplZCB0byBjYWxsIHRoaXMgZnVuY3Rpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyNjEKICAgIC8vIHNlbGYuYmVhY29uX2FwcCA9IEFwcGxpY2F0aW9uKGJlYWNvbl9pZC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgLTUKICAgIGJ0b2kKICAgIGJ5dGVjIDE0IC8vICJiZWFjb25fYXBwIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyNjIKICAgIC8vIHNlbGYuZGlzY291bnRfYXBwID0gQXBwbGljYXRpb24oZGlzY291bnRfaWQubmF0aXZlKQogICAgZnJhbWVfZGlnIC00CiAgICBidG9pCiAgICBieXRlYyAyNiAvLyAiZGlzY291bnRfYXBwIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyNjMKICAgIC8vIHNlbGYudGlja2V0X3Rva2VuID0gQXNzZXQoYXNzZXRfaWQubmF0aXZlKQogICAgZnJhbWVfZGlnIC03CiAgICBidG9pCiAgICBieXRlYyAxMCAvLyAidGlja2V0X3Rva2VuIgogICAgZGlnIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjY0CiAgICAvLyBzZWxmLmRlY2ltYWxzID0gMTAqKmRlY2ltYWxzLm5hdGl2ZQogICAgZnJhbWVfZGlnIC02CiAgICBidG9pCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBzd2FwCiAgICBleHAKICAgIGJ5dGVjIDE1IC8vICJkZWNpbWFscyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MjY1CiAgICAvLyBzZWxmLmdhbWVfc3RhdHVzID0gU3RyaW5nKCJPcGVuIikKICAgIGJ5dGVjXzMgLy8gImdhbWVfc3RhdHVzIgogICAgYnl0ZWMgMTcgLy8gIk9wZW4iCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjI2NgogICAgLy8gc2VsZi5nYW1lX3JvdW5kID0gVUludCgxKQogICAgYnl0ZWMgNiAvLyAiZ2FtZV9yb3VuZCIKICAgIGludGNfMSAvLyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjI2OAogICAgLy8gc2VsZi50aWNrZXRfcHJpY2UgPSBwcmljZS5uYXRpdmUgKiBzZWxmLmRlY2ltYWxzCiAgICBmcmFtZV9kaWcgLTgKICAgIGJ0b2kKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNSAvLyAiZGVjaW1hbHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVjaW1hbHMgZXhpc3RzCiAgICAqCiAgICBieXRlYyAxOCAvLyAidGlja2V0X3ByaWNlIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyNzAKICAgIC8vIHNlbGYucmV2ZWFsX2R1cmF0aW9uID0gcmV2ZWFsX2R1cmF0aW9uLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0zCiAgICBidG9pCiAgICBieXRlYyAyMSAvLyAicmV2ZWFsX2R1cmF0aW9uIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyNzEKICAgIC8vIHNlbGYucGF5b3V0X2R1cmF0aW9uID0gcGF5b3V0X2R1cmF0aW9uLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBieXRlYyAyMiAvLyAicGF5b3V0X2R1cmF0aW9uIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyNzIKICAgIC8vIHNlbGYuc3VibWlzc2lvbl9kdXJhdGlvbiA9IHN1Ym1pc3Npb25zX2R1cmF0aW9uLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBieXRlYyAxNiAvLyAic3VibWlzc2lvbl9kdXJhdGlvbiIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mjc0CiAgICAvLyBzZWxmLnJldmVhbCA9IFJldmVhbCgKICAgIGJ5dGVjIDExIC8vICJyZXZlYWwiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mjc0LTI4NAogICAgLy8gc2VsZi5yZXZlYWwgPSBSZXZlYWwoCiAgICAvLyAgICAgc3VibWlzc2lvbnNfZW5kX3JvdW5kPVVJbnQ2NCgwKSwKICAgIC8vICAgICBwYXlvdXRfZW5kX3JvdW5kPVVJbnQ2NCgwKSwKICAgIC8vICAgICB3aW5uaW5nX3RpY2tldD1UaWNrZXQoCiAgICAvLyAgICAgICAgIFVJbnQ4KDApLAogICAgLy8gICAgICAgICBVSW50OCgwKSwKICAgIC8vICAgICAgICAgVUludDgoMCksCiAgICAvLyAgICAgICAgIFVJbnQ4KDApLAogICAgLy8gICAgICAgICBVSW50OCgwKSwKICAgIC8vICAgICApLAogICAgLy8gKQogICAgYnl0ZWMgMjcgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mjg3CiAgICAvLyB0eF9pZD1TdGF0aWNBcnJheVtCeXRlLCBMaXRlcmFsWzMyXV0uZnJvbV9ieXRlcyhUeG4udHhfaWQpLAogICAgdHhuIFR4SUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyODgKICAgIC8vIHJldmVhbF9yb3VuZD1VSW50NjQoR2xvYmFsLnJvdW5kKSwKICAgIGdsb2JhbCBSb3VuZAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjI4Ni0yODkKICAgIC8vIHNlbGYuY29tbWl0bWVudCA9IENvbW1pdG1lbnQoCiAgICAvLyAgICAgdHhfaWQ9U3RhdGljQXJyYXlbQnl0ZSwgTGl0ZXJhbFszMl1dLmZyb21fYnl0ZXMoVHhuLnR4X2lkKSwKICAgIC8vICAgICByZXZlYWxfcm91bmQ9VUludDY0KEdsb2JhbC5yb3VuZCksCiAgICAvLyApCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyODYKICAgIC8vIHNlbGYuY29tbWl0bWVudCA9IENvbW1pdG1lbnQoCiAgICBieXRlYyAxMyAvLyAiY29tbWl0bWVudCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyODYtMjg5CiAgICAvLyBzZWxmLmNvbW1pdG1lbnQgPSBDb21taXRtZW50KAogICAgLy8gICAgIHR4X2lkPVN0YXRpY0FycmF5W0J5dGUsIExpdGVyYWxbMzJdXS5mcm9tX2J5dGVzKFR4bi50eF9pZCksCiAgICAvLyAgICAgcmV2ZWFsX3JvdW5kPVVJbnQ2NChHbG9iYWwucm91bmQpLAogICAgLy8gKQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyOTEKICAgIC8vIHNlbGYud2lubmVycyA9IFdpbm5lcnMoCiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjI5MS0yOTUKICAgIC8vIHNlbGYud2lubmVycyA9IFdpbm5lcnMoCiAgICAvLyAgICAgdGhyZWVfbWF0Y2g9VUludDY0KDApLAogICAgLy8gICAgIGZvdXJfbWF0Y2g9VUludDY0KDApLAogICAgLy8gICAgIGZpdmVfbWF0Y2g9VUludDY0KDApLAogICAgLy8gKQogICAgYnl0ZWMgMjggLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mjk3LTMwMwogICAgLy8gIyBPcHQtaW4gdG8gdGhlIHRpY2tldCB0b2tlbgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldF9pZC5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTAsCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mjk5CiAgICAvLyBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMDEKICAgIC8vIGFzc2V0X2Ftb3VudD0wLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weToyOTctMjk4CiAgICAvLyAjIE9wdC1pbiB0byB0aGUgdGlja2V0IHRva2VuCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMDIKICAgIC8vIGZlZT0wLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mjk3LTMwMwogICAgLy8gIyBPcHQtaW4gdG8gdGhlIHRpY2tldCB0b2tlbgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldF9pZC5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTAsCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjMwNQogICAgLy8gc2VsZi5ib290c3RyYXBwZWQgPSBUcnVlCiAgICBieXRlYyAxMiAvLyAiYm9vdHN0cmFwcGVkIgogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS5zdWJtaXRfY29tbWl0KCkgLT4gdm9pZDoKc3VibWl0X2NvbW1pdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMDkKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZXhlY3V0b3IsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJleGVjdXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5leGVjdXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjMxMAogICAgLy8gYXNzZXJ0IHNlbGYuYm9vdHN0cmFwcGVkLCBlcnIuQUxSRUFEWV9CT09UU1RSQVBQRUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMiAvLyAiYm9vdHN0cmFwcGVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJvb3RzdHJhcHBlZCBleGlzdHMKICAgIGFzc2VydCAvLyBMb3R0ZXJ5IGFscmVhZHkgYm9vdHN0cmFwcGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzExCiAgICAvLyBhc3NlcnQgbm90IHNlbGYuY29tbWl0dGVkLCBlcnIuQUxSRUFEWV9DT01NSVRURUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA4IC8vICJjb21taXR0ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY29tbWl0dGVkIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIExvdHRlcnkgYWxyZWFkeSBjb21taXR0ZWQgdG8gYmVhY29uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzE0CiAgICAvLyB0eF9pZD1TdGF0aWNBcnJheVtCeXRlLCBMaXRlcmFsWzMyXV0uZnJvbV9ieXRlcyhUeG4udHhfaWQpLAogICAgdHhuIFR4SUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMTUKICAgIC8vIHJldmVhbF9yb3VuZD1VSW50NjQoR2xvYmFsLnJvdW5kICsgc2VsZi5yZXZlYWxfZHVyYXRpb24pLAogICAgZ2xvYmFsIFJvdW5kCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMjEgLy8gInJldmVhbF9kdXJhdGlvbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZXZlYWxfZHVyYXRpb24gZXhpc3RzCiAgICArCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzEzLTMxNgogICAgLy8gc2VsZi5jb21taXRtZW50ID0gQ29tbWl0bWVudCgKICAgIC8vICAgICB0eF9pZD1TdGF0aWNBcnJheVtCeXRlLCBMaXRlcmFsWzMyXV0uZnJvbV9ieXRlcyhUeG4udHhfaWQpLAogICAgLy8gICAgIHJldmVhbF9yb3VuZD1VSW50NjQoR2xvYmFsLnJvdW5kICsgc2VsZi5yZXZlYWxfZHVyYXRpb24pLAogICAgLy8gKQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzEzCiAgICAvLyBzZWxmLmNvbW1pdG1lbnQgPSBDb21taXRtZW50KAogICAgYnl0ZWMgMTMgLy8gImNvbW1pdG1lbnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzEzLTMxNgogICAgLy8gc2VsZi5jb21taXRtZW50ID0gQ29tbWl0bWVudCgKICAgIC8vICAgICB0eF9pZD1TdGF0aWNBcnJheVtCeXRlLCBMaXRlcmFsWzMyXV0uZnJvbV9ieXRlcyhUeG4udHhfaWQpLAogICAgLy8gICAgIHJldmVhbF9yb3VuZD1VSW50NjQoR2xvYmFsLnJvdW5kICsgc2VsZi5yZXZlYWxfZHVyYXRpb24pLAogICAgLy8gKQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMTgKICAgIC8vIHNlbGYuY29tbWl0dGVkID0gVHJ1ZQogICAgYnl0ZWMgOCAvLyAiY29tbWl0dGVkIgogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS5yZXZlYWxfdGlja2V0KCkgLT4gdm9pZDoKcmV2ZWFsX3RpY2tldDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMjIKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZXhlY3V0b3IsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJleGVjdXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5leGVjdXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjMyMwogICAgLy8gYXNzZXJ0IHNlbGYuYm9vdHN0cmFwcGVkLCBlcnIuQUxSRUFEWV9CT09UU1RSQVBQRUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMiAvLyAiYm9vdHN0cmFwcGVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJvb3RzdHJhcHBlZCBleGlzdHMKICAgIGFzc2VydCAvLyBMb3R0ZXJ5IGFscmVhZHkgYm9vdHN0cmFwcGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzI0CiAgICAvLyBhc3NlcnQgbm90IHNlbGYucmV2ZWFsZWQsIGVyci5BTFJFQURZX1JFVkVBTEVECiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAicmV2ZWFsZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYucmV2ZWFsZWQgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQgLy8gTG90dGVyeSBhbHJlYWR5IHJldmVhbGVkIHdpbm5pbmcgdGlja2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzI1CiAgICAvLyBhc3NlcnQgc2VsZi5jb21taXR0ZWQsIGVyci5OT1RfQ09NTUlUVEVECiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgOCAvLyAiY29tbWl0dGVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbW1pdHRlZCBleGlzdHMKICAgIGFzc2VydCAvLyBMb3R0ZXJ5IGhhcyBub3QgY29tbWl0dGVkIHRvIGJlYWNvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjMyNwogICAgLy8gYXNzZXJ0IEdsb2JhbC5yb3VuZCA+PSBzZWxmLmNvbW1pdG1lbnQucmV2ZWFsX3JvdW5kLCBlcnIuVU5BVkFJTEFCTEUKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMyAvLyAiY29tbWl0bWVudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jb21taXRtZW50IGV4aXN0cwogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZ2xvYmFsIFJvdW5kCiAgICBpdG9iCiAgICBiPD0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCBhbGxvd2VkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbiB5ZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMjktMzM0CiAgICAvLyBkYXRhLCB0eG4gPSBhYmlfY2FsbFtEeW5hbWljQnl0ZXNdKAogICAgLy8gICAgICJnZXQodWludDY0LGJ5dGVbXSlieXRlW10iLAogICAgLy8gICAgIHNlbGYuY29tbWl0bWVudC5yZXZlYWxfcm91bmQsCiAgICAvLyAgICAgc2VsZi5jb21taXRtZW50LnR4X2lkLmJ5dGVzLAogICAgLy8gICAgIGFwcF9pZD1zZWxmLmJlYWNvbl9hcHAuaWQsCiAgICAvLyApCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzMxCiAgICAvLyBzZWxmLmNvbW1pdG1lbnQucmV2ZWFsX3JvdW5kLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEzIC8vICJjb21taXRtZW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNvbW1pdG1lbnQgZXhpc3RzCiAgICBleHRyYWN0IDMyIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzMyCiAgICAvLyBzZWxmLmNvbW1pdG1lbnQudHhfaWQuYnl0ZXMsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTMgLy8gImNvbW1pdG1lbnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY29tbWl0bWVudCBleGlzdHMKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzMzCiAgICAvLyBhcHBfaWQ9c2VsZi5iZWFjb25fYXBwLmlkLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE0IC8vICJiZWFjb25fYXBwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJlYWNvbl9hcHAgZXhpc3RzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMjktMzM0CiAgICAvLyBkYXRhLCB0eG4gPSBhYmlfY2FsbFtEeW5hbWljQnl0ZXNdKAogICAgLy8gICAgICJnZXQodWludDY0LGJ5dGVbXSlieXRlW10iLAogICAgLy8gICAgIHNlbGYuY29tbWl0bWVudC5yZXZlYWxfcm91bmQsCiAgICAvLyAgICAgc2VsZi5jb21taXRtZW50LnR4X2lkLmJ5dGVzLAogICAgLy8gICAgIGFwcF9pZD1zZWxmLmJlYWNvbl9hcHAuaWQsCiAgICAvLyApCiAgICBwdXNoYnl0ZXMgMHgxODkzOTJjNSAvLyBtZXRob2QgImdldCh1aW50NjQsYnl0ZVtdKWJ5dGVbXSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludGNfMiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlYyA5IC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQVJDNCBwcmVmaXggaXMgdmFsaWQKICAgIGl0eG4gQXBwbGljYXRpb25JRAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjMzNgogICAgLy8gYXNzZXJ0IHR4bi5hcHBfaWQgPT0gc2VsZi5iZWFjb25fYXBwLCBlcnIuSU5WQUxJRF9CRUFDT05fREFUQQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE0IC8vICJiZWFjb25fYXBwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmJlYWNvbl9hcHAgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIEJlYWNvbiByZXR1cm5lZCBhbiBlbXB0eSBieXRlcyBhcnJheQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjMzNwogICAgLy8gYXNzZXJ0IGRhdGEubGVuZ3RoID09IDMyLCBlcnIuSU5WQUxJRF9CRUFDT05fREFUQQogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMyAvLyAzMgogICAgPT0KICAgIGFzc2VydCAvLyBCZWFjb24gcmV0dXJuZWQgYW4gZW1wdHkgYnl0ZXMgYXJyYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozMzkKICAgIC8vIGRpZ2l0XzEgPSBVSW50OChvcC5nZXRieXRlKGRhdGEuYnl0ZXMsIDUpICUgY2ZnLkRJR0lUX0JPVU5EKQogICAgZHVwCiAgICBwdXNoaW50IDUgLy8gNQogICAgZ2V0Ynl0ZQogICAgaW50Y18zIC8vIDMyCiAgICAlCiAgICBpdG9iCiAgICBleHRyYWN0IDcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM0MAogICAgLy8gZGlnaXRfMiA9IFVJbnQ4KG9wLmdldGJ5dGUoZGF0YS5ieXRlcywgMTApICUgY2ZnLkRJR0lUX0JPVU5EKQogICAgZGlnIDEKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgIGdldGJ5dGUKICAgIGludGNfMyAvLyAzMgogICAgJQogICAgaXRvYgogICAgZXh0cmFjdCA3IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozNDEKICAgIC8vIGRpZ2l0XzMgPSBVSW50OChvcC5nZXRieXRlKGRhdGEuYnl0ZXMsIDE1KSAlIGNmZy5ESUdJVF9CT1VORCkKICAgIGRpZyAyCiAgICBwdXNoaW50IDE1IC8vIDE1CiAgICBnZXRieXRlCiAgICBpbnRjXzMgLy8gMzIKICAgICUKICAgIGl0b2IKICAgIGV4dHJhY3QgNyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzQyCiAgICAvLyBkaWdpdF80ID0gVUludDgob3AuZ2V0Ynl0ZShkYXRhLmJ5dGVzLCAyMCkgJSBjZmcuRElHSVRfQk9VTkQpCiAgICBkaWcgMwogICAgcHVzaGludCAyMCAvLyAyMAogICAgZ2V0Ynl0ZQogICAgaW50Y18zIC8vIDMyCiAgICAlCiAgICBpdG9iCiAgICBleHRyYWN0IDcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM0MwogICAgLy8gZGlnaXRfNSA9IFVJbnQ4KG9wLmdldGJ5dGUoZGF0YS5ieXRlcywgMjUpICUgY2ZnLkRJR0lUX0JPVU5EKQogICAgdW5jb3ZlciA0CiAgICBwdXNoaW50IDI1IC8vIDI1CiAgICBnZXRieXRlCiAgICBpbnRjXzMgLy8gMzIKICAgICUKICAgIGl0b2IKICAgIGV4dHJhY3QgNyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzQ2LTM1MgogICAgLy8gd2lubmluZ190aWNrZXQ9VGlja2V0KAogICAgLy8gICAgIGRpZ2l0XzEsCiAgICAvLyAgICAgZGlnaXRfMiwKICAgIC8vICAgICBkaWdpdF8zLAogICAgLy8gICAgIGRpZ2l0XzQsCiAgICAvLyAgICAgZGlnaXRfNSwKICAgIC8vICksCiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgNAogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM1NAogICAgLy8gcGF5b3V0X2VuZF9yb3VuZD1VSW50NjQoR2xvYmFsLnJvdW5kICsgc2VsZi5zdWJtaXNzaW9uX2R1cmF0aW9uICsgc2VsZi5wYXlvdXRfZHVyYXRpb24pLAogICAgZ2xvYmFsIFJvdW5kCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTYgLy8gInN1Ym1pc3Npb25fZHVyYXRpb24iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc3VibWlzc2lvbl9kdXJhdGlvbiBleGlzdHMKICAgICsKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAyMiAvLyAicGF5b3V0X2R1cmF0aW9uIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnBheW91dF9kdXJhdGlvbiBleGlzdHMKICAgICsKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozNTMKICAgIC8vIHN1Ym1pc3Npb25zX2VuZF9yb3VuZD1VSW50NjQoR2xvYmFsLnJvdW5kICsgc2VsZi5zdWJtaXNzaW9uX2R1cmF0aW9uKSwKICAgIGdsb2JhbCBSb3VuZAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDE2IC8vICJzdWJtaXNzaW9uX2R1cmF0aW9uIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnN1Ym1pc3Npb25fZHVyYXRpb24gZXhpc3RzCiAgICArCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzQ1LTM1NQogICAgLy8gc2VsZi5yZXZlYWwgPSBSZXZlYWwoCiAgICAvLyAgICAgd2lubmluZ190aWNrZXQ9VGlja2V0KAogICAgLy8gICAgICAgICBkaWdpdF8xLAogICAgLy8gICAgICAgICBkaWdpdF8yLAogICAgLy8gICAgICAgICBkaWdpdF8zLAogICAgLy8gICAgICAgICBkaWdpdF80LAogICAgLy8gICAgICAgICBkaWdpdF81LAogICAgLy8gICAgICksCiAgICAvLyAgICAgc3VibWlzc2lvbnNfZW5kX3JvdW5kPVVJbnQ2NChHbG9iYWwucm91bmQgKyBzZWxmLnN1Ym1pc3Npb25fZHVyYXRpb24pLAogICAgLy8gICAgIHBheW91dF9lbmRfcm91bmQ9VUludDY0KEdsb2JhbC5yb3VuZCArIHNlbGYuc3VibWlzc2lvbl9kdXJhdGlvbiArIHNlbGYucGF5b3V0X2R1cmF0aW9uKSwKICAgIC8vICkKICAgIGNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzQ1CiAgICAvLyBzZWxmLnJldmVhbCA9IFJldmVhbCgKICAgIGJ5dGVjIDExIC8vICJyZXZlYWwiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzQ1LTM1NQogICAgLy8gc2VsZi5yZXZlYWwgPSBSZXZlYWwoCiAgICAvLyAgICAgd2lubmluZ190aWNrZXQ9VGlja2V0KAogICAgLy8gICAgICAgICBkaWdpdF8xLAogICAgLy8gICAgICAgICBkaWdpdF8yLAogICAgLy8gICAgICAgICBkaWdpdF8zLAogICAgLy8gICAgICAgICBkaWdpdF80LAogICAgLy8gICAgICAgICBkaWdpdF81LAogICAgLy8gICAgICksCiAgICAvLyAgICAgc3VibWlzc2lvbnNfZW5kX3JvdW5kPVVJbnQ2NChHbG9iYWwucm91bmQgKyBzZWxmLnN1Ym1pc3Npb25fZHVyYXRpb24pLAogICAgLy8gICAgIHBheW91dF9lbmRfcm91bmQ9VUludDY0KEdsb2JhbC5yb3VuZCArIHNlbGYuc3VibWlzc2lvbl9kdXJhdGlvbiArIHNlbGYucGF5b3V0X2R1cmF0aW9uKSwKICAgIC8vICkKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzU3CiAgICAvLyBzZWxmLmdhbWVfc3RhdHVzID0gU3RyaW5nKCJTdWJtaXNzaW9uIikKICAgIGJ5dGVjXzMgLy8gImdhbWVfc3RhdHVzIgogICAgYnl0ZWMgMTkgLy8gIlN1Ym1pc3Npb24iCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM1OAogICAgLy8gc2VsZi5jb21taXR0ZWQgPSBGYWxzZQogICAgYnl0ZWMgOCAvLyAiY29tbWl0dGVkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzU5CiAgICAvLyBzZWxmLnJldmVhbGVkID0gVHJ1ZQogICAgYnl0ZWMgNyAvLyAicmV2ZWFsZWQiCiAgICBpbnRjXzEgLy8gMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYW5iZXRfbG90dGVyeS5jb250cmFjdC5GYW5iZXRMb3R0ZXJ5Lm9wZW5fcGF5b3V0KCkgLT4gdm9pZDoKb3Blbl9wYXlvdXQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzYzCiAgICAvLyBhc3NlcnQgR2xvYmFsLnJvdW5kID49IHNlbGYucmV2ZWFsLnN1Ym1pc3Npb25zX2VuZF9yb3VuZCwgZXJyLlVOQVZBSUxBQkxFCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTEgLy8gInJldmVhbCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZXZlYWwgZXhpc3RzCiAgICBleHRyYWN0IDEzIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBnbG9iYWwgUm91bmQKICAgIGl0b2IKICAgIGI8PQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IGFsbG93ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHlldAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM2NAogICAgLy8gYXNzZXJ0IHNlbGYuZ2FtZV9zdGF0dXMgPT0gU3RyaW5nKCJTdWJtaXNzaW9uIiksIGVyci5OT1RfUkVWRUFMRUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJnYW1lX3N0YXR1cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5nYW1lX3N0YXR1cyBleGlzdHMKICAgIGJ5dGVjIDE5IC8vICJTdWJtaXNzaW9uIgogICAgPT0KICAgIGFzc2VydCAvLyBMb3R0ZXJ5IHdpbm5pbmcgdGlja2V0IGhhcyBub3QgcmV2ZWFsZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozNjUKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZXhlY3V0b3IsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJleGVjdXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5leGVjdXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM2NgogICAgLy8gYXNzZXJ0IHNlbGYucmV2ZWFsZWQsIGVyci5OT1RfUkVWRUFMRUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA3IC8vICJyZXZlYWxlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZXZlYWxlZCBleGlzdHMKICAgIGFzc2VydCAvLyBMb3R0ZXJ5IHdpbm5pbmcgdGlja2V0IGhhcyBub3QgcmV2ZWFsZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozNjgKICAgIC8vIHNlbGYuZ2FtZV9zdGF0dXMgPSBTdHJpbmcoIlBheW91dCIpCiAgICBieXRlY18zIC8vICJnYW1lX3N0YXR1cyIKICAgIGJ5dGVjIDIwIC8vICJQYXlvdXQiCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9sb3R0ZXJ5LmNvbnRyYWN0LkZhbmJldExvdHRlcnkucGF5b3V0X21hbmFnZXJzKCkgLT4gdm9pZDoKcGF5b3V0X21hbmFnZXJzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM3MC0zNzEKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHBheW91dF9tYW5hZ2VycyhzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM3MgogICAgLy8gYXNzZXJ0IHNlbGYuZ2FtZV9zdGF0dXMgPT0gU3RyaW5nKCJQYXlvdXQiKSwgZXJyLk5PVF9SRVZFQUxFRAogICAgZHVwCiAgICBieXRlY18zIC8vICJnYW1lX3N0YXR1cyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5nYW1lX3N0YXR1cyBleGlzdHMKICAgIGJ5dGVjIDIwIC8vICJQYXlvdXQiCiAgICA9PQogICAgYXNzZXJ0IC8vIExvdHRlcnkgd2lubmluZyB0aWNrZXQgaGFzIG5vdCByZXZlYWxlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM3MwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5leGVjdXRvciwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gImV4ZWN1dG9yIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmV4ZWN1dG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mzc0CiAgICAvLyBhc3NlcnQgc2VsZi5yZXZlYWxlZCwgZXJyLk5PVF9SRVZFQUxFRAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gInJldmVhbGVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnJldmVhbGVkIGV4aXN0cwogICAgYXNzZXJ0IC8vIExvdHRlcnkgd2lubmluZyB0aWNrZXQgaGFzIG5vdCByZXZlYWxlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM3NQogICAgLy8gYXNzZXJ0IHNlbGYucHJpemVfcG9vbCA+IDAsIGVyci5JTlZBTElEX1BSSVpFX1BPT0wKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJwcml6ZV9wb29sIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnByaXplX3Bvb2wgZXhpc3RzCiAgICBhc3NlcnQgLy8gUHJpemUgcG9vbCBpcyBlbXB0eQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM3NwogICAgLy8gbWFuYWdlcnNfYWxsb2NhdGlvbiA9IChzZWxmLnByaXplX3Bvb2wgKiBjZmcuTUFOQUdFUlNfUEVSQ0VOVEFHRSkgLy8gVUludCgxMDApCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAicHJpemVfcG9vbCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wcml6ZV9wb29sIGV4aXN0cwogICAgcHVzaGludCAxMCAvLyAxMAogICAgKgogICAgcHVzaGludCAxMDAgLy8gMTAwCiAgICAvCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mzc5LTM4MAogICAgLy8gIyBQYXkgdGhlIE1hbmFnZXJzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi5tYW5hZ2Vycy5sZW5ndGgpOgogICAgaW50Y18wIC8vIDAKCnBheW91dF9tYW5hZ2Vyc19mb3JfaGVhZGVyQDE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6Mzc5LTM4MAogICAgLy8gIyBQYXkgdGhlIE1hbmFnZXJzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc2VsZi5tYW5hZ2Vycy5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDIKICAgIHB1c2hpbnQgMiAvLyAyCiAgICA8CiAgICBieiBwYXlvdXRfbWFuYWdlcnNfYWZ0ZXJfZm9yQDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozODEKICAgIC8vIG1hbmFnZXIgPSBzZWxmLm1hbmFnZXJzW2ldCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMjMgLy8gIm1hbmFnZXJzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm1hbmFnZXJzIGV4aXN0cwogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMyAvLyAzMgogICAgKgogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzgzLTM4NAogICAgLy8gIyBTa2lwIEFueSBtYW5hZ2VyIHRoYXQgY2Fubm90IHJlY2VpdmUgdGhlIHByaXplCiAgICAvLyBpZiBtYW5hZ2VyLm5hdGl2ZS5taW5fYmFsYW5jZSA8PSBtYW5hZ2VyLm5hdGl2ZS5iYWxhbmNlOgogICAgZHVwCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgc3dhcAogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIDw9CiAgICBibnogcGF5b3V0X21hbmFnZXJzX2Zvcl9mb290ZXJANgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM4NwogICAgLy8gcHJpemUgPSBtYW5hZ2Vyc19hbGxvY2F0aW9uIC8vIHNlbGYubWFuYWdlcnMubGVuZ3RoCiAgICBmcmFtZV9kaWcgMQogICAgcHVzaGludCAyIC8vIDIKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozODktMzk0CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLnRpY2tldF90b2tlbiwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1tYW5hZ2VyLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9cHJpemUsCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6MzkwCiAgICAvLyB4ZmVyX2Fzc2V0PXNlbGYudGlja2V0X3Rva2VuLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEwIC8vICJ0aWNrZXRfdG9rZW4iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlja2V0X3Rva2VuIGV4aXN0cwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgZnJhbWVfZGlnIDAKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozODkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIHB1c2hpbnQgNCAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM5MwogICAgLy8gZmVlPTAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozODktMzk0CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLnRpY2tldF90b2tlbiwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1tYW5hZ2VyLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9cHJpemUsCiAgICAvLyAgICAgZmVlPTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKcGF5b3V0X21hbmFnZXJzX2Zvcl9mb290ZXJANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozNzktMzgwCiAgICAvLyAjIFBheSB0aGUgTWFuYWdlcnMKICAgIC8vIGZvciBpIGluIHVyYW5nZShzZWxmLm1hbmFnZXJzLmxlbmd0aCk6CiAgICBmcmFtZV9kaWcgMgogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMgogICAgYiBwYXlvdXRfbWFuYWdlcnNfZm9yX2hlYWRlckAxCgpwYXlvdXRfbWFuYWdlcnNfYWZ0ZXJfZm9yQDc6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS5yZXNldF9sb3R0ZXJ5KCkgLT4gdm9pZDoKcmVzZXRfbG90dGVyeToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTozOTgKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZXhlY3V0b3IsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJleGVjdXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5leGVjdXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjM5OQogICAgLy8gYXNzZXJ0IHNlbGYucmV2ZWFsZWQsIGVyci5OT1RfUkVWRUFMRUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA3IC8vICJyZXZlYWxlZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5yZXZlYWxlZCBleGlzdHMKICAgIGFzc2VydCAvLyBMb3R0ZXJ5IHdpbm5pbmcgdGlja2V0IGhhcyBub3QgcmV2ZWFsZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MDEKICAgIC8vIHNlbGYud2lubmVycyA9IFdpbm5lcnMoCiAgICBieXRlY18wIC8vICJ3aW5uZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQwMS00MDUKICAgIC8vIHNlbGYud2lubmVycyA9IFdpbm5lcnMoCiAgICAvLyAgICAgdGhyZWVfbWF0Y2g9VUludDY0KDApLAogICAgLy8gICAgIGZvdXJfbWF0Y2g9VUludDY0KDApLAogICAgLy8gICAgIGZpdmVfbWF0Y2g9VUludDY0KDApLAogICAgLy8gKQogICAgYnl0ZWMgMjggLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDA3CiAgICAvLyBzZWxmLnJldmVhbCA9IFJldmVhbCgKICAgIGJ5dGVjIDExIC8vICJyZXZlYWwiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDA3LTQxNwogICAgLy8gc2VsZi5yZXZlYWwgPSBSZXZlYWwoCiAgICAvLyAgICAgcGF5b3V0X2VuZF9yb3VuZD1VSW50NjQoMCksCiAgICAvLyAgICAgc3VibWlzc2lvbnNfZW5kX3JvdW5kPVVJbnQ2NCgwKSwKICAgIC8vICAgICB3aW5uaW5nX3RpY2tldD1UaWNrZXQoCiAgICAvLyAgICAgICAgIFVJbnQ4KDApLAogICAgLy8gICAgICAgICBVSW50OCgwKSwKICAgIC8vICAgICAgICAgVUludDgoMCksCiAgICAvLyAgICAgICAgIFVJbnQ4KDApLAogICAgLy8gICAgICAgICBVSW50OCgwKSwKICAgIC8vICAgICApLAogICAgLy8gKQogICAgYnl0ZWMgMjcgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDE5CiAgICAvLyBzZWxmLmNvbW1pdHRlZCA9IEZhbHNlCiAgICBieXRlYyA4IC8vICJjb21taXR0ZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MjAKICAgIC8vIHNlbGYucmV2ZWFsZWQgPSBGYWxzZQogICAgYnl0ZWMgNyAvLyAicmV2ZWFsZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MjIKICAgIC8vIHNlbGYuZ2FtZV9zdGF0dXMgPSBTdHJpbmcoIk9wZW4iKQogICAgYnl0ZWNfMyAvLyAiZ2FtZV9zdGF0dXMiCiAgICBieXRlYyAxNyAvLyAiT3BlbiIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDIzCiAgICAvLyBzZWxmLmdhbWVfcm91bmQgKz0gVUludCgxKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gImdhbWVfcm91bmQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZ2FtZV9yb3VuZCBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlYyA2IC8vICJnYW1lX3JvdW5kIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MjYKICAgIC8vIEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQyNwogICAgLy8gc2VsZi50aWNrZXRfdG9rZW4sCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgMTAgLy8gInRpY2tldF90b2tlbiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aWNrZXRfdG9rZW4gZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDI1LTQyOAogICAgLy8gc2VsZi5wcml6ZV9wb29sID0gb3AuQXNzZXRIb2xkaW5nR2V0LmFzc2V0X2JhbGFuY2UoCiAgICAvLyAgICAgR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBzZWxmLnRpY2tldF90b2tlbiwKICAgIC8vIClbMF0KICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDI1CiAgICAvLyBzZWxmLnByaXplX3Bvb2wgPSBvcC5Bc3NldEhvbGRpbmdHZXQuYXNzZXRfYmFsYW5jZSgKICAgIGJ5dGVjXzIgLy8gInByaXplX3Bvb2wiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDI1LTQyOAogICAgLy8gc2VsZi5wcml6ZV9wb29sID0gb3AuQXNzZXRIb2xkaW5nR2V0LmFzc2V0X2JhbGFuY2UoCiAgICAvLyAgICAgR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICBzZWxmLnRpY2tldF90b2tlbiwKICAgIC8vIClbMF0KICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS51cGRhdGVfYWRtaW5fYWNjb3VudChuZXdfYWRtaW46IGJ5dGVzKSAtPiB2b2lkOgp1cGRhdGVfYWRtaW5fYWNjb3VudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MzQtNDM1CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiB1cGRhdGVfYWRtaW5fYWNjb3VudChzZWxmLCBuZXdfYWRtaW46IEFkZHJlc3MpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0MzYKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW5pc3RyYXRvciwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImFkbWluaXN0cmF0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW5pc3RyYXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQzNwogICAgLy8gc2VsZi5hZG1pbmlzdHJhdG9yID0gbmV3X2FkbWluLm5hdGl2ZQogICAgYnl0ZWNfMSAvLyAiYWRtaW5pc3RyYXRvciIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYW5iZXRfbG90dGVyeS5jb250cmFjdC5GYW5iZXRMb3R0ZXJ5LnVwZGF0ZV9leGVjdXRvcl9hY2NvdW50KG5ld19leGVjdXRvcjogYnl0ZXMpIC0+IHZvaWQ6CnVwZGF0ZV9leGVjdXRvcl9hY2NvdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQzOS00NDAKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHVwZGF0ZV9leGVjdXRvcl9hY2NvdW50KHNlbGYsIG5ld19leGVjdXRvcjogQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ0MQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hZG1pbmlzdHJhdG9yLCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYWRtaW5pc3RyYXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbmlzdHJhdG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDQyCiAgICAvLyBzZWxmLmV4ZWN1dG9yID0gbmV3X2V4ZWN1dG9yLm5hdGl2ZQogICAgYnl0ZWMgNCAvLyAiZXhlY3V0b3IiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS51cGRhdGVfbWFuYWdlcl9hY2NvdW50KGluZGV4OiBieXRlcywgbmV3X21hbmFnZXI6IGJ5dGVzKSAtPiB2b2lkOgp1cGRhdGVfbWFuYWdlcl9hY2NvdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ0NC00NDUKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHVwZGF0ZV9tYW5hZ2VyX2FjY291bnQoc2VsZiwgaW5kZXg6IFVJbnQ4LCBuZXdfbWFuYWdlcjogQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ0NgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hZG1pbmlzdHJhdG9yLCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYWRtaW5pc3RyYXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbmlzdHJhdG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDQ3CiAgICAvLyBzZWxmLm1hbmFnZXJzW2luZGV4Lm5hdGl2ZV0gPSBuZXdfbWFuYWdlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDIzIC8vICJtYW5hZ2VycyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tYW5hZ2VycyBleGlzdHMKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZHVwCiAgICBwdXNoaW50IDIgLy8gMgogICAgPAogICAgYXNzZXJ0IC8vIEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBpbnRjXzMgLy8gMzIKICAgICoKICAgIGZyYW1lX2RpZyAtMQogICAgcmVwbGFjZTMKICAgIGJ5dGVjIDIzIC8vICJtYW5hZ2VycyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS51cGRhdGVfYmVhY29uX2FwcChuZXdfYmVhY29uX2lkOiBieXRlcykgLT4gdm9pZDoKdXBkYXRlX2JlYWNvbl9hcHA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDQ5LTQ1MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdXBkYXRlX2JlYWNvbl9hcHAoc2VsZiwgbmV3X2JlYWNvbl9pZDogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDUxCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmFkbWluaXN0cmF0b3IsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJhZG1pbmlzdHJhdG9yIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFkbWluaXN0cmF0b3IgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IHVuYXV0aG9yaXplZCB0byBjYWxsIHRoaXMgZnVuY3Rpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NTIKICAgIC8vIHNlbGYuYmVhY29uX2FwcCA9IEFwcGxpY2F0aW9uKG5ld19iZWFjb25faWQubmF0aXZlKQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBieXRlYyAxNCAvLyAiYmVhY29uX2FwcCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS51cGRhdGVfZGlzY291bnRfYXBwKG5ld19kaXNjb3VudF9pZDogYnl0ZXMpIC0+IHZvaWQ6CnVwZGF0ZV9kaXNjb3VudF9hcHA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDU0LTQ1NQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdXBkYXRlX2Rpc2NvdW50X2FwcChzZWxmLCBuZXdfZGlzY291bnRfaWQ6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ1NgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hZG1pbmlzdHJhdG9yLCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYWRtaW5pc3RyYXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbmlzdHJhdG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDU3CiAgICAvLyBzZWxmLmRpc2NvdW50X2FwcCA9IEFwcGxpY2F0aW9uKG5ld19kaXNjb3VudF9pZC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGJ5dGVjIDI2IC8vICJkaXNjb3VudF9hcHAiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9sb3R0ZXJ5LmNvbnRyYWN0LkZhbmJldExvdHRlcnkudXBkYXRlX3JldmVhbF9kdXJhdGlvbihuZXdfZGVsYXk6IGJ5dGVzKSAtPiB2b2lkOgp1cGRhdGVfcmV2ZWFsX2R1cmF0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ1OS00NjAKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHVwZGF0ZV9yZXZlYWxfZHVyYXRpb24oc2VsZiwgbmV3X2RlbGF5OiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NjEKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW5pc3RyYXRvciwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImFkbWluaXN0cmF0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW5pc3RyYXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ2MgogICAgLy8gc2VsZi5yZXZlYWxfZHVyYXRpb24gPSBuZXdfZGVsYXkubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGJ5dGVjIDIxIC8vICJyZXZlYWxfZHVyYXRpb24iCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9sb3R0ZXJ5LmNvbnRyYWN0LkZhbmJldExvdHRlcnkudXBkYXRlX3N1Ym1pc3Npb25fZHVyYXRpb24obmV3X2RlbGF5OiBieXRlcykgLT4gdm9pZDoKdXBkYXRlX3N1Ym1pc3Npb25fZHVyYXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDY0LTQ2NQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdXBkYXRlX3N1Ym1pc3Npb25fZHVyYXRpb24oc2VsZiwgbmV3X2RlbGF5OiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0NjYKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW5pc3RyYXRvciwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImFkbWluaXN0cmF0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW5pc3RyYXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ2NwogICAgLy8gc2VsZi5zdWJtaXNzaW9uX2R1cmF0aW9uID0gbmV3X2RlbGF5Lm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBieXRlYyAxNiAvLyAic3VibWlzc2lvbl9kdXJhdGlvbiIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS51cGRhdGVfcGF5b3V0X2R1cmF0aW9uKG5ld19kZWxheTogYnl0ZXMpIC0+IHZvaWQ6CnVwZGF0ZV9wYXlvdXRfZHVyYXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDY5LTQ3MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdXBkYXRlX3BheW91dF9kdXJhdGlvbihzZWxmLCBuZXdfZGVsYXk6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ3MQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hZG1pbmlzdHJhdG9yLCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYWRtaW5pc3RyYXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbmlzdHJhdG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDcyCiAgICAvLyBzZWxmLnBheW91dF9kdXJhdGlvbiA9IG5ld19kZWxheS5uYXRpdmUKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgYnl0ZWMgMjIgLy8gInBheW91dF9kdXJhdGlvbiIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2xvdHRlcnkuY29udHJhY3QuRmFuYmV0TG90dGVyeS51cGRhdGVfdGlja2V0X3ByaWNlKG5ld19wcmljZTogYnl0ZXMpIC0+IHZvaWQ6CnVwZGF0ZV90aWNrZXRfcHJpY2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDc0LTQ3NQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdXBkYXRlX3RpY2tldF9wcmljZShzZWxmLCBuZXdfcHJpY2U6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ3NgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5hZG1pbmlzdHJhdG9yLCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYWRtaW5pc3RyYXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hZG1pbmlzdHJhdG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDc3CiAgICAvLyBzZWxmLnRpY2tldF9wcmljZSA9IG5ld19wcmljZS5uYXRpdmUgKiBzZWxmLmRlY2ltYWxzCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxNSAvLyAiZGVjaW1hbHMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZGVjaW1hbHMgZXhpc3RzCiAgICAqCiAgICBieXRlYyAxOCAvLyAidGlja2V0X3ByaWNlIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYW5iZXRfbG90dGVyeS5jb250cmFjdC5GYW5iZXRMb3R0ZXJ5LnVwZGF0ZV90aWNrZXRfdG9rZW4obmV3X3Rva2VuX2lkOiBieXRlcywgbmV3X2RlY2ltYWw6IGJ5dGVzKSAtPiB2b2lkOgp1cGRhdGVfdGlja2V0X3Rva2VuOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ3OS00ODAKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHVwZGF0ZV90aWNrZXRfdG9rZW4oc2VsZiwgbmV3X3Rva2VuX2lkOiBVSW50NjQsIG5ld19kZWNpbWFsOiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0ODEKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuYWRtaW5pc3RyYXRvciwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImFkbWluaXN0cmF0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYWRtaW5pc3RyYXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ4MgogICAgLy8gc2VsZi50aWNrZXRfdG9rZW4gPSBBc3NldChuZXdfdG9rZW5faWQubmF0aXZlKQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBieXRlYyAxMCAvLyAidGlja2V0X3Rva2VuIgogICAgZGlnIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDgzCiAgICAvLyBzZWxmLmRlY2ltYWxzID0gMTAqKm5ld19kZWNpbWFsLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICBzd2FwCiAgICBleHAKICAgIGJ5dGVjIDE1IC8vICJkZWNpbWFscyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDg1LTQ5MAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgeGZlcl9hc3NldD1uZXdfdG9rZW5faWQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0wLAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ4NgogICAgLy8gYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDg4CiAgICAvLyBhc3NldF9hbW91bnQ9MCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDg1CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0ODkKICAgIC8vIGZlZT0wLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDg1LTQ5MAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgeGZlcl9hc3NldD1uZXdfdG9rZW5faWQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD0wLAogICAgLy8gICAgIGZlZT0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYW5iZXRfbG90dGVyeS5jb250cmFjdC5GYW5iZXRMb3R0ZXJ5LmdldF9zdG9yYWdlX2Nvc3QobnVtX29mX3RpY2tldHM6IGJ5dGVzKSAtPiBieXRlczoKZ2V0X3N0b3JhZ2VfY29zdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0OTItNDkzCiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X3N0b3JhZ2VfY29zdChzZWxmLCBudW1fb2ZfdGlja2V0czogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0OTUKICAgIC8vIGNvc3Rfb2ZfYXJyYXkgPSBVSW50KDIpICsgKGNvc3RfcGVyX3RpY2tldCAqIG51bV9vZl90aWNrZXRzLm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9sb3R0ZXJ5L2NvbnRyYWN0LnB5OjQ5NAogICAgLy8gY29zdF9wZXJfdGlja2V0ID0gVUludCg1ICogOCkKICAgIHB1c2hpbnQgNDAgLy8gNDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0OTUKICAgIC8vIGNvc3Rfb2ZfYXJyYXkgPSBVSW50KDIpICsgKGNvc3RfcGVyX3RpY2tldCAqIG51bV9vZl90aWNrZXRzLm5hdGl2ZSkKICAgICoKICAgIHB1c2hpbnQgMiAvLyAyCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2xvdHRlcnkvY29udHJhY3QucHk6NDk4CiAgICAvLyB0aWNrZXRzX2Nvc3QgPSBVSW50KDQwMCkgKiBjb3N0X29mX2FycmF5CiAgICBwdXNoaW50IDQwMCAvLyA0MDAKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0OTkKICAgIC8vIG1pbmltdW1fY29zdCA9IFVJbnQoMCBpZiBUeG4uc2VuZGVyIGluIHNlbGYucGxheWVycyBlbHNlIGNmZy5NSU5fU1RPUkFHRV9DT1NUKQogICAgYnl0ZWMgNSAvLyAicF8iCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgcHVzaGludCAyNzg1MDAgLy8gMjc4NTAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo0OTcKICAgIC8vIGJveF9jb3N0ID0gVUludCgyNTAwICsgKDQwMCAqICg2NCArIDIpKSkKICAgIHB1c2hpbnQgMjg5MDAgLy8gMjg5MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfbG90dGVyeS9jb250cmFjdC5weTo1MDEKICAgIC8vIHJldHVybiBVSW50NjQobWluaW11bV9jb3N0ICsgYm94X2Nvc3QgKyB0aWNrZXRzX2Nvc3QpCiAgICArCiAgICArCiAgICBpdG9iCiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the FanbetLottery contract
 */
export type FanbetLotteryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'buy_tickets(pay,axfer,uint8[5][])void': {
      payTxn: AppMethodCallTransactionArgument
      axferTxn: AppMethodCallTransactionArgument
      guesses: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number][]
    }
    'submit_tickets()void': Record<string, never>
    'payout_winnings()void': Record<string, never>
    'get_winning_ticket()uint8[5]': Record<string, never>
    'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': {
      price: bigint | number
      assetId: bigint | number
      decimals: bigint | number
      beaconId: bigint | number
      discountId: bigint | number
      revealDuration: bigint | number
      submissionsDuration: bigint | number
      payoutDuration: bigint | number
    }
    'submit_commit()void': Record<string, never>
    'reveal_ticket()void': Record<string, never>
    'open_payout()void': Record<string, never>
    'payout_managers()void': Record<string, never>
    'reset_lottery()void': Record<string, never>
    'update_admin_account(address)void': {
      newAdmin: string
    }
    'update_executor_account(address)void': {
      newExecutor: string
    }
    'update_manager_account(uint8,address)void': {
      index: bigint | number
      newManager: string
    }
    'update_beacon_app(uint64)void': {
      newBeaconId: bigint | number
    }
    'update_discount_app(uint64)void': {
      newDiscountId: bigint | number
    }
    'update_reveal_duration(uint64)void': {
      newDelay: bigint | number
    }
    'update_submission_duration(uint64)void': {
      newDelay: bigint | number
    }
    'update_payout_duration(uint64)void': {
      newDelay: bigint | number
    }
    'update_ticket_price(uint64)void': {
      newPrice: bigint | number
    }
    'update_ticket_token(uint64,uint64)void': {
      newTokenId: bigint | number
      newDecimal: bigint | number
    }
    'get_storage_cost(uint64)uint64': {
      numOfTickets: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'buy_tickets(pay,axfer,uint8[5][])void': [payTxn: AppMethodCallTransactionArgument, axferTxn: AppMethodCallTransactionArgument, guesses: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number][]]
    'submit_tickets()void': []
    'payout_winnings()void': []
    'get_winning_ticket()uint8[5]': []
    'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': [price: bigint | number, assetId: bigint | number, decimals: bigint | number, beaconId: bigint | number, discountId: bigint | number, revealDuration: bigint | number, submissionsDuration: bigint | number, payoutDuration: bigint | number]
    'submit_commit()void': []
    'reveal_ticket()void': []
    'open_payout()void': []
    'payout_managers()void': []
    'reset_lottery()void': []
    'update_admin_account(address)void': [newAdmin: string]
    'update_executor_account(address)void': [newExecutor: string]
    'update_manager_account(uint8,address)void': [index: bigint | number, newManager: string]
    'update_beacon_app(uint64)void': [newBeaconId: bigint | number]
    'update_discount_app(uint64)void': [newDiscountId: bigint | number]
    'update_reveal_duration(uint64)void': [newDelay: bigint | number]
    'update_submission_duration(uint64)void': [newDelay: bigint | number]
    'update_payout_duration(uint64)void': [newDelay: bigint | number]
    'update_ticket_price(uint64)void': [newPrice: bigint | number]
    'update_ticket_token(uint64,uint64)void': [newTokenId: bigint | number, newDecimal: bigint | number]
    'get_storage_cost(uint64)uint64': [numOfTickets: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type FanbetLotteryReturns = {
  'buy_tickets(pay,axfer,uint8[5][])void': void
  'submit_tickets()void': void
  'payout_winnings()void': void
  'get_winning_ticket()uint8[5]': [number, number, number, number, number]
  'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void': void
  'submit_commit()void': void
  'reveal_ticket()void': void
  'open_payout()void': void
  'payout_managers()void': void
  'reset_lottery()void': void
  'update_admin_account(address)void': void
  'update_executor_account(address)void': void
  'update_manager_account(uint8,address)void': void
  'update_beacon_app(uint64)void': void
  'update_discount_app(uint64)void': void
  'update_reveal_duration(uint64)void': void
  'update_submission_duration(uint64)void': void
  'update_payout_duration(uint64)void': void
  'update_ticket_price(uint64)void': void
  'update_ticket_token(uint64,uint64)void': void
  'get_storage_cost(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the FanbetLottery smart contract.
 */
export type FanbetLotteryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'buy_tickets(pay,axfer,uint8[5][])void' | 'buy_tickets', {
      argsObj: FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void']
      argsTuple: FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']
      returns: FanbetLotteryReturns['buy_tickets(pay,axfer,uint8[5][])void']
    }>
    & Record<'submit_tickets()void' | 'submit_tickets', {
      argsObj: FanbetLotteryArgs['obj']['submit_tickets()void']
      argsTuple: FanbetLotteryArgs['tuple']['submit_tickets()void']
      returns: FanbetLotteryReturns['submit_tickets()void']
    }>
    & Record<'payout_winnings()void' | 'payout_winnings', {
      argsObj: FanbetLotteryArgs['obj']['payout_winnings()void']
      argsTuple: FanbetLotteryArgs['tuple']['payout_winnings()void']
      returns: FanbetLotteryReturns['payout_winnings()void']
    }>
    & Record<'get_winning_ticket()uint8[5]' | 'get_winning_ticket', {
      argsObj: FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]']
      argsTuple: FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']
      returns: FanbetLotteryReturns['get_winning_ticket()uint8[5]']
    }>
    & Record<'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' | 'bootstrap', {
      argsObj: FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
      returns: FanbetLotteryReturns['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'submit_commit()void' | 'submit_commit', {
      argsObj: FanbetLotteryArgs['obj']['submit_commit()void']
      argsTuple: FanbetLotteryArgs['tuple']['submit_commit()void']
      returns: FanbetLotteryReturns['submit_commit()void']
    }>
    & Record<'reveal_ticket()void' | 'reveal_ticket', {
      argsObj: FanbetLotteryArgs['obj']['reveal_ticket()void']
      argsTuple: FanbetLotteryArgs['tuple']['reveal_ticket()void']
      returns: FanbetLotteryReturns['reveal_ticket()void']
    }>
    & Record<'open_payout()void' | 'open_payout', {
      argsObj: FanbetLotteryArgs['obj']['open_payout()void']
      argsTuple: FanbetLotteryArgs['tuple']['open_payout()void']
      returns: FanbetLotteryReturns['open_payout()void']
    }>
    & Record<'payout_managers()void' | 'payout_managers', {
      argsObj: FanbetLotteryArgs['obj']['payout_managers()void']
      argsTuple: FanbetLotteryArgs['tuple']['payout_managers()void']
      returns: FanbetLotteryReturns['payout_managers()void']
    }>
    & Record<'reset_lottery()void' | 'reset_lottery', {
      argsObj: FanbetLotteryArgs['obj']['reset_lottery()void']
      argsTuple: FanbetLotteryArgs['tuple']['reset_lottery()void']
      returns: FanbetLotteryReturns['reset_lottery()void']
    }>
    & Record<'update_admin_account(address)void' | 'update_admin_account', {
      argsObj: FanbetLotteryArgs['obj']['update_admin_account(address)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_admin_account(address)void']
      returns: FanbetLotteryReturns['update_admin_account(address)void']
    }>
    & Record<'update_executor_account(address)void' | 'update_executor_account', {
      argsObj: FanbetLotteryArgs['obj']['update_executor_account(address)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_executor_account(address)void']
      returns: FanbetLotteryReturns['update_executor_account(address)void']
    }>
    & Record<'update_manager_account(uint8,address)void' | 'update_manager_account', {
      argsObj: FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']
      returns: FanbetLotteryReturns['update_manager_account(uint8,address)void']
    }>
    & Record<'update_beacon_app(uint64)void' | 'update_beacon_app', {
      argsObj: FanbetLotteryArgs['obj']['update_beacon_app(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']
      returns: FanbetLotteryReturns['update_beacon_app(uint64)void']
    }>
    & Record<'update_discount_app(uint64)void' | 'update_discount_app', {
      argsObj: FanbetLotteryArgs['obj']['update_discount_app(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']
      returns: FanbetLotteryReturns['update_discount_app(uint64)void']
    }>
    & Record<'update_reveal_duration(uint64)void' | 'update_reveal_duration', {
      argsObj: FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']
      returns: FanbetLotteryReturns['update_reveal_duration(uint64)void']
    }>
    & Record<'update_submission_duration(uint64)void' | 'update_submission_duration', {
      argsObj: FanbetLotteryArgs['obj']['update_submission_duration(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']
      returns: FanbetLotteryReturns['update_submission_duration(uint64)void']
    }>
    & Record<'update_payout_duration(uint64)void' | 'update_payout_duration', {
      argsObj: FanbetLotteryArgs['obj']['update_payout_duration(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']
      returns: FanbetLotteryReturns['update_payout_duration(uint64)void']
    }>
    & Record<'update_ticket_price(uint64)void' | 'update_ticket_price', {
      argsObj: FanbetLotteryArgs['obj']['update_ticket_price(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']
      returns: FanbetLotteryReturns['update_ticket_price(uint64)void']
    }>
    & Record<'update_ticket_token(uint64,uint64)void' | 'update_ticket_token', {
      argsObj: FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']
      returns: FanbetLotteryReturns['update_ticket_token(uint64,uint64)void']
    }>
    & Record<'get_storage_cost(uint64)uint64' | 'get_storage_cost', {
      argsObj: FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64']
      argsTuple: FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']
      returns: FanbetLotteryReturns['get_storage_cost(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        administrator: BinaryState
        beaconApp: bigint
        bootstrapped: bigint
        commitment: BinaryState
        committed: bigint
        decimals: bigint
        discountApp: bigint
        executor: BinaryState
        gameRound: bigint
        gameStatus: BinaryState
        managers: BinaryState
        payoutDuration: bigint
        prizePool: bigint
        reveal: BinaryState
        revealDuration: bigint
        revealed: bigint
        submissionDuration: bigint
        ticketPrice: bigint
        ticketToken: bigint
        winners: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FanbetLotterySignatures = keyof FanbetLotteryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FanbetLotteryNonVoidMethodSignatures = keyof FanbetLotteryTypes['methods'] extends infer T ? T extends keyof FanbetLotteryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FanbetLottery smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FanbetLotterySignatures> = FanbetLotteryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FanbetLottery smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FanbetLotterySignatures> = FanbetLotteryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FanbetLotteryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FanbetLotteryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FanbetLotteryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FanbetLotteryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FanbetLottery smart contract
 */
export abstract class FanbetLotteryParamsFactory {
  /**
   * Constructs a no op call for the buy_tickets(pay,axfer,uint8[5][])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyTickets(params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_tickets(pay,axfer,uint8[5][])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payTxn, params.args.axferTxn, params.args.guesses],
    }
  }
  /**
   * Constructs a no op call for the submit_tickets()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitTickets(params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit_tickets()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the payout_winnings()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payoutWinnings(params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payout_winnings()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_winning_ticket()uint8[5] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getWinningTicket(params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_winning_ticket()uint8[5]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.price, params.args.assetId, params.args.decimals, params.args.beaconId, params.args.discountId, params.args.revealDuration, params.args.submissionsDuration, params.args.payoutDuration],
    }
  }
  /**
   * Constructs a no op call for the submit_commit()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitCommit(params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit_commit()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the reveal_ticket()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static revealTicket(params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reveal_ticket()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the open_payout()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static openPayout(params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'open_payout()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the payout_managers()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payoutManagers(params: CallParams<FanbetLotteryArgs['obj']['payout_managers()void'] | FanbetLotteryArgs['tuple']['payout_managers()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payout_managers()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the reset_lottery()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetLottery(params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reset_lottery()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the update_admin_account(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdminAccount(params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_admin_account(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the update_executor_account(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateExecutorAccount(params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_executor_account(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newExecutor],
    }
  }
  /**
   * Constructs a no op call for the update_manager_account(uint8,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateManagerAccount(params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_manager_account(uint8,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.index, params.args.newManager],
    }
  }
  /**
   * Constructs a no op call for the update_beacon_app(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateBeaconApp(params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_beacon_app(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newBeaconId],
    }
  }
  /**
   * Constructs a no op call for the update_discount_app(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateDiscountApp(params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_discount_app(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDiscountId],
    }
  }
  /**
   * Constructs a no op call for the update_reveal_duration(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateRevealDuration(params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_reveal_duration(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDelay],
    }
  }
  /**
   * Constructs a no op call for the update_submission_duration(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateSubmissionDuration(params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_submission_duration(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDelay],
    }
  }
  /**
   * Constructs a no op call for the update_payout_duration(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePayoutDuration(params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_payout_duration(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDelay],
    }
  }
  /**
   * Constructs a no op call for the update_ticket_price(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTicketPrice(params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_ticket_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newPrice],
    }
  }
  /**
   * Constructs a no op call for the update_ticket_token(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTicketToken(params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_ticket_token(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newTokenId, params.args.newDecimal],
    }
  }
  /**
   * Constructs a no op call for the get_storage_cost(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStorageCost(params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_storage_cost(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.numOfTickets],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FanbetLottery smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FanbetLotteryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FanbetLotteryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FanbetLotteryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FanbetLotteryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FanbetLottery smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FanbetLotteryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FanbetLotteryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetLottery smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetLottery smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetLottery smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FanbetLotteryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FanbetLottery smart contract
 */
export class FanbetLotteryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FanbetLotteryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FanbetLottery app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FanbetLotteryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FanbetLotteryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FanbetLotteryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FanbetLotteryClient> {
    return new FanbetLotteryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FanbetLotteryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FanbetLotteryClient> {
    return new FanbetLotteryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetLottery smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `buy_tickets(pay,axfer,uint8[5][])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyTickets: (params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.buyTickets(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_tickets()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitTickets: (params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.submitTickets(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_winnings()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payoutWinnings: (params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.payoutWinnings(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_winning_ticket()uint8[5]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getWinningTicket: (params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.getWinningTicket(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_commit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitCommit: (params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.submitCommit(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reveal_ticket()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    revealTicket: (params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.revealTicket(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `open_payout()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    openPayout: (params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.openPayout(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_managers()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payoutManagers: (params: CallParams<FanbetLotteryArgs['obj']['payout_managers()void'] | FanbetLotteryArgs['tuple']['payout_managers()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.payoutManagers(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reset_lottery()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetLottery: (params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.resetLottery(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_admin_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdminAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateAdminAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_executor_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateExecutorAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateExecutorAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_manager_account(uint8,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateManagerAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateManagerAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_beacon_app(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateBeaconApp: (params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateBeaconApp(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_discount_app(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateDiscountApp: (params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateDiscountApp(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_reveal_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateRevealDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateRevealDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_submission_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateSubmissionDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateSubmissionDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_payout_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePayoutDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updatePayoutDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTicketPrice: (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateTicketPrice(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_token(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTicketToken: (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateTicketToken(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_storage_cost(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getStorageCost: (params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.getStorageCost(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetLottery smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `buy_tickets(pay,axfer,uint8[5][])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyTickets: (params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.buyTickets(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_tickets()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitTickets: (params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.submitTickets(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_winnings()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payoutWinnings: (params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.payoutWinnings(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_winning_ticket()uint8[5]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getWinningTicket: (params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.getWinningTicket(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_commit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitCommit: (params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.submitCommit(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reveal_ticket()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    revealTicket: (params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.revealTicket(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `open_payout()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    openPayout: (params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.openPayout(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_managers()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payoutManagers: (params: CallParams<FanbetLotteryArgs['obj']['payout_managers()void'] | FanbetLotteryArgs['tuple']['payout_managers()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.payoutManagers(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reset_lottery()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetLottery: (params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.resetLottery(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_admin_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdminAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateAdminAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_executor_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateExecutorAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateExecutorAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_manager_account(uint8,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateManagerAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateManagerAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_beacon_app(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateBeaconApp: (params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateBeaconApp(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_discount_app(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateDiscountApp: (params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateDiscountApp(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_reveal_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateRevealDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateRevealDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_submission_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateSubmissionDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateSubmissionDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_payout_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePayoutDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updatePayoutDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTicketPrice: (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateTicketPrice(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_token(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTicketToken: (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateTicketToken(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_storage_cost(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getStorageCost: (params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.getStorageCost(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetLottery smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `buy_tickets(pay,axfer,uint8[5][])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyTickets: async (params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.buyTickets(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['buy_tickets(pay,axfer,uint8[5][])void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_tickets()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitTickets: async (params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.submitTickets(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['submit_tickets()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_winnings()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payoutWinnings: async (params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.payoutWinnings(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['payout_winnings()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_winning_ticket()uint8[5]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getWinningTicket: async (params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.getWinningTicket(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['get_winning_ticket()uint8[5]'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_commit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitCommit: async (params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.submitCommit(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['submit_commit()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reveal_ticket()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    revealTicket: async (params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.revealTicket(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['reveal_ticket()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `open_payout()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    openPayout: async (params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.openPayout(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['open_payout()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_managers()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payoutManagers: async (params: CallParams<FanbetLotteryArgs['obj']['payout_managers()void'] | FanbetLotteryArgs['tuple']['payout_managers()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.payoutManagers(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['payout_managers()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reset_lottery()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetLottery: async (params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.resetLottery(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['reset_lottery()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_admin_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdminAccount: async (params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateAdminAccount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_admin_account(address)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_executor_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateExecutorAccount: async (params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateExecutorAccount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_executor_account(address)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_manager_account(uint8,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateManagerAccount: async (params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateManagerAccount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_manager_account(uint8,address)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_beacon_app(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateBeaconApp: async (params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateBeaconApp(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_beacon_app(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_discount_app(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateDiscountApp: async (params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateDiscountApp(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_discount_app(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_reveal_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateRevealDuration: async (params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateRevealDuration(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_reveal_duration(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_submission_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateSubmissionDuration: async (params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateSubmissionDuration(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_submission_duration(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_payout_duration(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePayoutDuration: async (params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updatePayoutDuration(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_payout_duration(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTicketPrice: async (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateTicketPrice(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_ticket_price(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_token(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTicketToken: async (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateTicketToken(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_ticket_token(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_storage_cost(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getStorageCost: async (params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.getStorageCost(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['get_storage_cost(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FanbetLotteryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the FanbetLottery smart contract using the `get_winning_ticket()uint8[5]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getWinningTicket(params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> = {args: []}) {
    const result = await this.appClient.send.call(FanbetLotteryParamsFactory.getWinningTicket(params))
    return result.return as unknown as FanbetLotteryReturns['get_winning_ticket()uint8[5]']
  }

  /**
   * Makes a readonly (simulated) call to the FanbetLottery smart contract using the `get_storage_cost(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getStorageCost(params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']>) {
    const result = await this.appClient.send.call(FanbetLotteryParamsFactory.getStorageCost(params))
    return result.return as unknown as FanbetLotteryReturns['get_storage_cost(uint64)uint64']
  }

  /**
   * Methods to access state for the current FanbetLottery app
   */
  state = {
    /**
     * Methods to access global state for the current FanbetLottery app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          administrator: new BinaryStateValue(result.administrator),
          beaconApp: result.beacon_app,
          bootstrapped: result.bootstrapped,
          commitment: new BinaryStateValue(result.commitment),
          committed: result.committed,
          decimals: result.decimals,
          discountApp: result.discount_app,
          executor: new BinaryStateValue(result.executor),
          gameRound: result.game_round,
          gameStatus: new BinaryStateValue(result.game_status),
          managers: new BinaryStateValue(result.managers),
          payoutDuration: result.payout_duration,
          prizePool: result.prize_pool,
          reveal: new BinaryStateValue(result.reveal),
          revealDuration: result.reveal_duration,
          revealed: result.revealed,
          submissionDuration: result.submission_duration,
          ticketPrice: result.ticket_price,
          ticketToken: result.ticket_token,
          winners: new BinaryStateValue(result.winners),
        }
      },
      /**
       * Get the current value of the administrator key in global state
       */
      administrator: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("administrator")) as Uint8Array | undefined) },
      /**
       * Get the current value of the beacon_app key in global state
       */
      beaconApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("beacon_app")) as bigint | undefined },
      /**
       * Get the current value of the bootstrapped key in global state
       */
      bootstrapped: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bootstrapped")) as bigint | undefined },
      /**
       * Get the current value of the commitment key in global state
       */
      commitment: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("commitment")) as Uint8Array | undefined) },
      /**
       * Get the current value of the committed key in global state
       */
      committed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("committed")) as bigint | undefined },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as bigint | undefined },
      /**
       * Get the current value of the discount_app key in global state
       */
      discountApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("discount_app")) as bigint | undefined },
      /**
       * Get the current value of the executor key in global state
       */
      executor: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("executor")) as Uint8Array | undefined) },
      /**
       * Get the current value of the game_round key in global state
       */
      gameRound: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("game_round")) as bigint | undefined },
      /**
       * Get the current value of the game_status key in global state
       */
      gameStatus: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("game_status")) as Uint8Array | undefined) },
      /**
       * Get the current value of the managers key in global state
       */
      managers: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("managers")) as Uint8Array | undefined) },
      /**
       * Get the current value of the payout_duration key in global state
       */
      payoutDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("payout_duration")) as bigint | undefined },
      /**
       * Get the current value of the prize_pool key in global state
       */
      prizePool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("prize_pool")) as bigint | undefined },
      /**
       * Get the current value of the reveal key in global state
       */
      reveal: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("reveal")) as Uint8Array | undefined) },
      /**
       * Get the current value of the reveal_duration key in global state
       */
      revealDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reveal_duration")) as bigint | undefined },
      /**
       * Get the current value of the revealed key in global state
       */
      revealed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("revealed")) as bigint | undefined },
      /**
       * Get the current value of the submission_duration key in global state
       */
      submissionDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("submission_duration")) as bigint | undefined },
      /**
       * Get the current value of the ticket_price key in global state
       */
      ticketPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticket_price")) as bigint | undefined },
      /**
       * Get the current value of the ticket_token key in global state
       */
      ticketToken: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticket_token")) as bigint | undefined },
      /**
       * Get the current value of the winners key in global state
       */
      winners: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("winners")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): FanbetLotteryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a buy_tickets(pay,axfer,uint8[5][])void method call against the FanbetLottery contract
       */
      buyTickets(params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submit_tickets()void method call against the FanbetLottery contract
       */
      submitTickets(params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a payout_winnings()void method call against the FanbetLottery contract
       */
      payoutWinnings(params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payoutWinnings(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_winning_ticket()uint8[5] method call against the FanbetLottery contract
       */
      getWinningTicket(params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getWinningTicket(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_winning_ticket()uint8[5]', v))
        return this
      },
      /**
       * Add a bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void method call against the FanbetLottery contract
       */
      bootstrap(params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submit_commit()void method call against the FanbetLottery contract
       */
      submitCommit(params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reveal_ticket()void method call against the FanbetLottery contract
       */
      revealTicket(params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.revealTicket(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a open_payout()void method call against the FanbetLottery contract
       */
      openPayout(params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.openPayout(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a payout_managers()void method call against the FanbetLottery contract
       */
      payoutManagers(params: CallParams<FanbetLotteryArgs['obj']['payout_managers()void'] | FanbetLotteryArgs['tuple']['payout_managers()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payoutManagers(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reset_lottery()void method call against the FanbetLottery contract
       */
      resetLottery(params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetLottery(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_admin_account(address)void method call against the FanbetLottery contract
       */
      updateAdminAccount(params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdminAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_executor_account(address)void method call against the FanbetLottery contract
       */
      updateExecutorAccount(params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateExecutorAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_manager_account(uint8,address)void method call against the FanbetLottery contract
       */
      updateManagerAccount(params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateManagerAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_beacon_app(uint64)void method call against the FanbetLottery contract
       */
      updateBeaconApp(params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateBeaconApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_discount_app(uint64)void method call against the FanbetLottery contract
       */
      updateDiscountApp(params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateDiscountApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_reveal_duration(uint64)void method call against the FanbetLottery contract
       */
      updateRevealDuration(params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateRevealDuration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_submission_duration(uint64)void method call against the FanbetLottery contract
       */
      updateSubmissionDuration(params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateSubmissionDuration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_payout_duration(uint64)void method call against the FanbetLottery contract
       */
      updatePayoutDuration(params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePayoutDuration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_ticket_price(uint64)void method call against the FanbetLottery contract
       */
      updateTicketPrice(params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTicketPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_ticket_token(uint64,uint64)void method call against the FanbetLottery contract
       */
      updateTicketToken(params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTicketToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_storage_cost(uint64)uint64 method call against the FanbetLottery contract
       */
      getStorageCost(params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStorageCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_storage_cost(uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the FanbetLottery contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FanbetLotteryComposer
  }
}
export type FanbetLotteryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the buy_tickets(pay,axfer,uint8[5][])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyTickets(params?: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['buy_tickets(pay,axfer,uint8[5][])void'] | undefined]>

  /**
   * Calls the submit_tickets()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitTickets(params?: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['submit_tickets()void'] | undefined]>

  /**
   * Calls the payout_winnings()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payoutWinnings(params?: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['payout_winnings()void'] | undefined]>

  /**
   * Calls the get_winning_ticket()uint8[5] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getWinningTicket(params?: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['get_winning_ticket()uint8[5]'] | undefined]>

  /**
   * Calls the bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the submit_commit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitCommit(params?: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['submit_commit()void'] | undefined]>

  /**
   * Calls the reveal_ticket()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  revealTicket(params?: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['reveal_ticket()void'] | undefined]>

  /**
   * Calls the open_payout()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  openPayout(params?: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['open_payout()void'] | undefined]>

  /**
   * Calls the payout_managers()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payoutManagers(params?: CallParams<FanbetLotteryArgs['obj']['payout_managers()void'] | FanbetLotteryArgs['tuple']['payout_managers()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['payout_managers()void'] | undefined]>

  /**
   * Calls the reset_lottery()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetLottery(params?: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['reset_lottery()void'] | undefined]>

  /**
   * Calls the update_admin_account(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdminAccount(params?: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_admin_account(address)void'] | undefined]>

  /**
   * Calls the update_executor_account(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateExecutorAccount(params?: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_executor_account(address)void'] | undefined]>

  /**
   * Calls the update_manager_account(uint8,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateManagerAccount(params?: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_manager_account(uint8,address)void'] | undefined]>

  /**
   * Calls the update_beacon_app(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateBeaconApp(params?: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_beacon_app(uint64)void'] | undefined]>

  /**
   * Calls the update_discount_app(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateDiscountApp(params?: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_discount_app(uint64)void'] | undefined]>

  /**
   * Calls the update_reveal_duration(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateRevealDuration(params?: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_reveal_duration(uint64)void'] | undefined]>

  /**
   * Calls the update_submission_duration(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSubmissionDuration(params?: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_submission_duration(uint64)void'] | undefined]>

  /**
   * Calls the update_payout_duration(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePayoutDuration(params?: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_payout_duration(uint64)void'] | undefined]>

  /**
   * Calls the update_ticket_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTicketPrice(params?: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_ticket_price(uint64)void'] | undefined]>

  /**
   * Calls the update_ticket_token(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTicketToken(params?: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_ticket_token(uint64,uint64)void'] | undefined]>

  /**
   * Calls the get_storage_cost(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStorageCost(params?: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['get_storage_cost(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FanbetLottery smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FanbetLotteryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FanbetLotteryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FanbetLotteryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FanbetLotteryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FanbetLotteryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FanbetLotteryComposerResults<TReturns>>
}
export type FanbetLotteryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

